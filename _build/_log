### Starting build.
# Target: main.ml.depends, tags: { extension:ml, file:main.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules main.ml > main.ml.depends # cached
# Target: affichage.ml.depends, tags: { extension:ml, file:affichage.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules affichage.ml > affichage.ml.depends # cached
# Target: options.ml.depends, tags: { extension:ml, file:options.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules options.ml > options.ml.depends # cached
# Target: options.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:options.cmo, file:options.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o options.cmo options.ml # cached
# Target: types.ml.depends, tags: { extension:ml, file:types.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules types.ml > types.ml.depends # cached
# Target: types.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:types.cmo, file:types.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o types.cmo types.ml # cached
# Target: affichage.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:affichage.cmo, file:affichage.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o affichage.cmo affichage.ml # cached
# Target: exceptions.ml.depends, tags: { extension:ml, file:exceptions.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules exceptions.ml > exceptions.ml.depends # cached
# Target: exceptions.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:exceptions.cmo, file:exceptions.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o exceptions.cmo exceptions.ml # cached
# Target: expr.ml.depends, tags: { extension:ml, file:expr.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules expr.ml > expr.ml.depends # cached
# Target: expr.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:expr.cmo, file:expr.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o expr.cmo expr.ml # cached
# Target: inference.ml.depends, tags: { extension:ml, file:inference.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules inference.ml > inference.ml.depends # cached
# Target: inference.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:inference.cmo, file:inference.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o inference.cmo inference.ml # cached
# Target: lexer.mll, tags: { extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet }
/usr/bin/ocamllex.opt -q lexer.mll # cached
# Target: lexer.ml.depends, tags: { extension:ml, file:lexer.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules lexer.ml > lexer.ml.depends # cached
# Target: parser.mly, tags: { extension:mly, file:parser.mly, infer, ocaml, ocamlyacc, parser, quiet }
/usr/bin/ocamlyacc -v parser.mly # cached
# Target: parser.mli.depends, tags: { extension:mli, file:parser.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules parser.mli > parser.mli.depends # cached
# Target: parser.cmi, tags: { byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o parser.cmi parser.mli # cached
# Target: lexer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o lexer.cmo lexer.ml # cached
# Target: unif.ml.depends, tags: { extension:ml, file:unif.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules unif.ml > unif.ml.depends
+ /usr/bin/ocamldep.opt -modules unif.ml > unif.ml.depends
File "unif.ml", line 64, characters 2-3:
64 |   | T TFun(_,a)      when appear v a
       ^
Error: Syntax error
Command exited with code 2.
# Compilation unsuccessful.
