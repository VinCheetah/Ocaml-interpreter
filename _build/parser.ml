type token =
  | INT of (int)
  | VAR of (string)
  | PLUS
  | TIMES
  | MINUS
  | DIV
  | MOD
  | LPAREN
  | RPAREN
  | BEGIN
  | END
  | EOF
  | L
  | LE
  | G
  | GE
  | NE
  | EQ
  | IF
  | THEN
  | ELSE
  | LET
  | IN
  | REC
  | TRUE
  | FALSE
  | AND
  | OR
  | NOT
  | PRINT
  | FUN
  | FLECHE
  | FUNCTION
  | SCOLON
  | DSCOLON
  | UNIT
  | REF
  | EXCL
  | REVAL
  | UNDERSCORE
  | E
  | RAISE
  | TRY
  | MATCH
  | WITH
  | PIPE
  | INCR
  | DECR
  | COMMA
  | LLIST
  | RLIST
  | EMPTYLIST
  | CONS

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* --- pr√©ambule: ici du code Caml --- *)

open Types   (* rappel: dans Types.ml: 
             type expr = Const of int | Add of expr*expr | Mull of expr*expr *)

# 65 "parser.ml"
let yytransl_const = [|
  259 (* PLUS *);
  260 (* TIMES *);
  261 (* MINUS *);
  262 (* DIV *);
  263 (* MOD *);
  264 (* LPAREN *);
  265 (* RPAREN *);
  266 (* BEGIN *);
  267 (* END *);
    0 (* EOF *);
  268 (* L *);
  269 (* LE *);
  270 (* G *);
  271 (* GE *);
  272 (* NE *);
  273 (* EQ *);
  274 (* IF *);
  275 (* THEN *);
  276 (* ELSE *);
  277 (* LET *);
  278 (* IN *);
  279 (* REC *);
  280 (* TRUE *);
  281 (* FALSE *);
  282 (* AND *);
  283 (* OR *);
  284 (* NOT *);
  285 (* PRINT *);
  286 (* FUN *);
  287 (* FLECHE *);
  288 (* FUNCTION *);
  289 (* SCOLON *);
  290 (* DSCOLON *);
  291 (* UNIT *);
  292 (* REF *);
  293 (* EXCL *);
  294 (* REVAL *);
  295 (* UNDERSCORE *);
  296 (* E *);
  297 (* RAISE *);
  298 (* TRY *);
  299 (* MATCH *);
  300 (* WITH *);
  301 (* PIPE *);
  302 (* INCR *);
  303 (* DECR *);
  304 (* COMMA *);
  305 (* LLIST *);
  306 (* RLIST *);
  307 (* EMPTYLIST *);
  308 (* CONS *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* VAR *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\003\000\003\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\006\000\006\000\006\000\006\000\006\000\010\000\
\010\000\007\000\007\000\011\000\011\000\012\000\012\000\008\000\
\008\000\008\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\003\000\001\000\001\000\001\000\001\000\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\002\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\006\000\005\000\006\000\003\000\003\000\002\000\
\002\000\004\000\002\000\002\000\002\000\002\000\002\000\003\000\
\001\000\003\000\001\000\003\000\004\000\003\000\003\000\001\000\
\001\000\001\000\003\000\003\000\001\000\002\000\001\000\001\000\
\001\000\003\000\001\000\001\000\001\000\001\000\002\000\001\000\
\003\000\001\000\002\000\002\000\002\000\003\000\003\000\002\000\
\002\000\001\000\001\000\003\000\001\000\003\000\001\000\002\000\
\005\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\083\000\000\000\000\000\000\000\000\000\000\000\017\000\
\000\000\000\000\000\000\055\000\048\000\000\000\000\000\056\000\
\057\000\050\000\049\000\000\000\000\000\053\000\000\000\000\000\
\060\000\059\000\000\000\061\000\062\000\064\000\000\000\000\000\
\066\000\039\000\000\000\036\000\000\000\032\000\033\000\000\000\
\000\000\037\000\038\000\000\000\000\000\001\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\073\000\
\072\000\000\000\011\000\000\000\000\000\000\000\054\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\063\000\000\000\040\000\000\000\000\000\000\000\000\000\004\000\
\000\000\013\000\000\000\015\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\046\000\000\000\000\000\052\000\000\000\000\000\000\000\
\000\000\000\000\000\000\067\000\074\000\075\000\000\000\058\000\
\065\000\000\000\000\000\034\000\045\000\076\000\000\000\000\000\
\078\000\070\000\071\000\000\000\080\000\000\000\000\000\000\000\
\000\000\000\000\081\000"

let yydgoto = "\002\000\
\026\000\027\000\028\000\029\000\147\000\103\000\143\000\148\000\
\030\000\031\000\069\000\097\000"

let yysindex = "\009\000\
\074\005\000\000\000\000\000\000\074\005\074\005\074\005\074\005\
\011\255\000\000\000\000\074\005\211\003\181\005\000\000\211\003\
\211\003\074\005\074\005\074\005\074\005\211\003\211\003\074\005\
\000\000\000\000\027\000\254\254\074\006\211\003\211\003\000\000\
\005\255\010\255\196\005\000\000\000\000\181\005\181\005\000\000\
\000\000\000\000\000\000\181\005\181\005\000\000\095\255\155\255\
\000\000\000\000\074\005\000\000\000\000\000\000\211\003\074\005\
\000\000\000\000\095\255\000\000\000\000\000\000\000\000\015\255\
\246\005\000\000\000\000\006\006\239\254\000\000\074\005\074\005\
\074\005\074\005\074\005\074\005\074\005\074\005\074\005\074\005\
\074\005\074\005\074\005\074\005\074\005\074\005\074\005\000\000\
\000\000\000\000\000\000\074\005\253\254\095\255\000\000\245\254\
\007\255\165\255\023\005\181\005\181\005\095\255\034\255\006\255\
\000\000\019\255\000\000\155\004\155\004\074\005\000\000\000\000\
\020\255\000\000\020\255\000\000\060\255\155\255\155\255\155\255\
\155\255\155\255\155\255\167\006\223\255\140\006\124\006\124\006\
\056\006\000\000\034\255\181\005\000\000\155\004\254\254\155\004\
\254\254\009\255\009\255\000\000\000\000\000\000\074\005\000\000\
\000\000\155\004\233\254\000\000\000\000\000\000\074\005\074\005\
\000\000\000\000\000\000\254\254\000\000\074\005\074\006\254\254\
\251\254\155\004\000\000"

let yyrindex = "\000\000\
\000\000\000\000\001\000\053\000\000\000\000\000\000\000\000\000\
\000\000\105\000\157\000\000\000\000\000\000\000\209\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\011\001\000\000\000\000\070\000\105\004\000\000\219\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\102\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\063\001\000\000\000\000\000\000\
\000\000\000\000\000\000\038\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\115\001\000\000\000\000\000\000\000\000\000\000\039\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\167\001\000\000\
\221\002\000\000\009\003\000\000\146\003\166\003\206\003\244\003\
\008\004\046\004\084\004\126\004\164\004\202\004\222\004\229\004\
\000\000\000\000\000\000\000\000\000\000\000\000\021\002\000\000\
\073\002\125\005\146\005\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\125\002\000\000\000\000\249\004\177\002\
\060\003\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\252\255\255\255\078\000\206\255\215\255\152\255\
\202\000\000\000\200\255\217\255"

let yytablesize = 1985
let yytable = "\106\000\
\005\000\033\000\034\000\032\000\149\000\130\000\035\000\158\000\
\107\000\001\000\048\000\036\000\037\000\090\000\144\000\064\000\
\062\000\063\000\038\000\065\000\091\000\132\000\068\000\073\000\
\100\000\075\000\070\000\071\000\101\000\154\000\071\000\155\000\
\111\000\039\000\040\000\041\000\100\000\071\000\071\000\162\000\
\101\000\157\000\071\000\131\000\100\000\042\000\104\000\071\000\
\101\000\043\000\044\000\140\000\008\000\150\000\068\000\141\000\
\133\000\163\000\108\000\045\000\101\000\046\000\072\000\073\000\
\074\000\075\000\112\000\142\000\145\000\002\000\113\000\114\000\
\115\000\116\000\117\000\118\000\119\000\120\000\121\000\122\000\
\123\000\124\000\125\000\126\000\127\000\128\000\047\000\077\000\
\079\000\152\000\129\000\059\000\153\000\135\000\137\000\036\000\
\037\000\000\000\000\000\000\000\000\000\000\000\038\000\000\000\
\006\000\000\000\000\000\000\000\068\000\000\000\000\000\098\000\
\000\000\000\000\000\000\093\000\094\000\000\000\040\000\041\000\
\000\000\095\000\096\000\000\000\102\000\099\000\000\000\000\000\
\000\000\042\000\000\000\000\000\000\000\043\000\044\000\000\000\
\102\000\000\000\156\000\000\000\000\000\000\000\100\000\045\000\
\000\000\046\000\101\000\160\000\000\000\159\000\000\000\000\000\
\000\000\161\000\000\000\000\000\007\000\072\000\073\000\074\000\
\075\000\076\000\000\000\000\000\000\000\003\000\004\000\000\000\
\000\000\005\000\000\000\102\000\006\000\000\000\007\000\000\000\
\000\000\138\000\139\000\102\000\000\000\000\000\008\000\000\000\
\000\000\009\000\000\000\000\000\010\000\011\000\000\000\000\000\
\012\000\013\000\014\000\000\000\134\000\000\000\000\000\015\000\
\016\000\017\000\000\000\000\000\018\000\019\000\020\000\021\000\
\009\000\096\000\022\000\023\000\000\000\024\000\058\000\025\000\
\000\000\060\000\061\000\000\000\000\000\000\000\000\000\066\000\
\067\000\072\000\073\000\074\000\075\000\076\000\000\000\088\000\
\089\000\000\000\077\000\078\000\079\000\080\000\081\000\082\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\083\000\084\000\000\000\000\000\000\000\000\000\000\000\000\000\
\105\000\060\000\060\000\005\000\005\000\005\000\005\000\005\000\
\060\000\005\000\043\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\000\000\005\000\005\000\000\000\005\000\000\000\
\060\000\060\000\005\000\005\000\000\000\000\000\000\000\000\000\
\000\000\005\000\005\000\060\000\000\000\060\000\005\000\000\000\
\000\000\000\000\000\000\000\000\005\000\005\000\000\000\000\000\
\005\000\060\000\005\000\060\000\005\000\059\000\059\000\008\000\
\008\000\008\000\008\000\008\000\059\000\008\000\035\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\000\000\008\000\
\008\000\000\000\008\000\000\000\059\000\059\000\008\000\008\000\
\000\000\000\000\000\000\000\000\000\000\008\000\008\000\059\000\
\000\000\059\000\008\000\000\000\000\000\000\000\000\000\000\000\
\008\000\008\000\000\000\000\000\008\000\059\000\008\000\059\000\
\008\000\061\000\061\000\006\000\006\000\006\000\006\000\006\000\
\061\000\006\000\010\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\000\000\006\000\006\000\000\000\006\000\000\000\
\061\000\061\000\006\000\006\000\000\000\000\000\000\000\000\000\
\000\000\006\000\006\000\061\000\000\000\061\000\006\000\000\000\
\000\000\000\000\000\000\000\000\006\000\006\000\000\000\000\000\
\006\000\061\000\006\000\061\000\006\000\062\000\062\000\007\000\
\007\000\007\000\007\000\007\000\062\000\007\000\044\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\000\000\007\000\
\007\000\000\000\007\000\000\000\062\000\062\000\007\000\007\000\
\000\000\000\000\000\000\000\000\000\000\007\000\007\000\062\000\
\000\000\062\000\007\000\000\000\000\000\000\000\000\000\000\000\
\007\000\007\000\000\000\000\000\007\000\062\000\007\000\062\000\
\007\000\064\000\064\000\009\000\009\000\009\000\009\000\009\000\
\064\000\009\000\041\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\000\000\009\000\009\000\000\000\009\000\000\000\
\064\000\064\000\009\000\009\000\000\000\000\000\000\000\000\000\
\000\000\009\000\009\000\064\000\000\000\064\000\009\000\000\000\
\000\000\000\000\000\000\000\000\009\000\009\000\000\000\000\000\
\009\000\064\000\009\000\064\000\009\000\000\000\000\000\000\000\
\000\000\000\000\000\000\066\000\066\000\043\000\043\000\043\000\
\043\000\043\000\066\000\043\000\068\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\000\000\043\000\043\000\000\000\
\043\000\000\000\066\000\066\000\043\000\043\000\000\000\000\000\
\000\000\000\000\000\000\043\000\043\000\066\000\000\000\066\000\
\043\000\000\000\000\000\000\000\000\000\000\000\043\000\043\000\
\000\000\000\000\043\000\066\000\043\000\066\000\043\000\063\000\
\063\000\035\000\035\000\035\000\035\000\035\000\063\000\035\000\
\069\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\000\000\035\000\035\000\000\000\035\000\000\000\063\000\063\000\
\035\000\035\000\000\000\000\000\000\000\000\000\000\000\035\000\
\035\000\063\000\000\000\063\000\035\000\000\000\000\000\000\000\
\000\000\000\000\035\000\035\000\000\000\000\000\035\000\063\000\
\035\000\063\000\035\000\058\000\058\000\010\000\010\000\010\000\
\010\000\010\000\058\000\010\000\028\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\000\000\010\000\010\000\000\000\
\010\000\000\000\058\000\058\000\010\000\010\000\000\000\000\000\
\000\000\000\000\000\000\010\000\010\000\058\000\000\000\058\000\
\010\000\000\000\000\000\000\000\000\000\000\000\010\000\010\000\
\000\000\000\000\010\000\058\000\010\000\058\000\010\000\065\000\
\065\000\044\000\044\000\044\000\044\000\044\000\065\000\044\000\
\029\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\000\000\044\000\044\000\000\000\044\000\000\000\065\000\065\000\
\044\000\044\000\000\000\000\000\000\000\000\000\000\000\044\000\
\044\000\065\000\000\000\065\000\044\000\000\000\000\000\000\000\
\000\000\000\000\044\000\044\000\000\000\000\000\044\000\065\000\
\044\000\065\000\044\000\000\000\012\000\041\000\041\000\041\000\
\041\000\041\000\000\000\041\000\000\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\000\000\041\000\041\000\000\000\
\041\000\000\000\000\000\000\000\041\000\041\000\000\000\000\000\
\000\000\000\000\000\000\041\000\041\000\000\000\000\000\000\000\
\041\000\000\000\000\000\000\000\000\000\000\000\041\000\041\000\
\014\000\000\000\041\000\000\000\041\000\000\000\041\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\068\000\
\068\000\068\000\068\000\068\000\000\000\068\000\000\000\068\000\
\068\000\068\000\068\000\068\000\068\000\068\000\000\000\068\000\
\068\000\000\000\068\000\000\000\000\000\000\000\068\000\068\000\
\000\000\000\000\000\000\000\000\000\000\000\000\068\000\000\000\
\000\000\000\000\068\000\082\000\000\000\000\000\000\000\000\000\
\068\000\068\000\000\000\000\000\068\000\000\000\068\000\000\000\
\068\000\000\000\000\000\069\000\069\000\069\000\069\000\069\000\
\000\000\069\000\000\000\069\000\069\000\069\000\069\000\069\000\
\069\000\069\000\000\000\069\000\069\000\000\000\069\000\000\000\
\000\000\000\000\069\000\069\000\000\000\026\000\000\000\000\000\
\000\000\000\000\069\000\000\000\000\000\000\000\069\000\000\000\
\000\000\000\000\000\000\000\000\069\000\069\000\000\000\000\000\
\069\000\000\000\069\000\000\000\069\000\000\000\000\000\028\000\
\028\000\028\000\028\000\028\000\000\000\028\000\000\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\000\000\028\000\
\028\000\016\000\028\000\000\000\000\000\000\000\028\000\028\000\
\000\000\000\000\000\000\000\000\000\000\000\000\028\000\000\000\
\000\000\000\000\028\000\000\000\000\000\018\000\000\000\000\000\
\028\000\028\000\000\000\000\000\028\000\000\000\028\000\000\000\
\028\000\000\000\000\000\029\000\029\000\029\000\029\000\029\000\
\000\000\029\000\000\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\000\000\029\000\029\000\000\000\029\000\000\000\
\000\000\000\000\029\000\029\000\000\000\019\000\000\000\000\000\
\000\000\000\000\029\000\000\000\000\000\000\000\029\000\000\000\
\000\000\000\000\000\000\000\000\029\000\029\000\000\000\012\000\
\029\000\012\000\029\000\012\000\029\000\012\000\000\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\000\000\012\000\
\012\000\000\000\012\000\020\000\000\000\000\000\012\000\012\000\
\000\000\000\000\000\000\000\000\000\000\012\000\012\000\000\000\
\000\000\000\000\012\000\000\000\000\000\000\000\000\000\021\000\
\012\000\012\000\000\000\014\000\012\000\014\000\012\000\014\000\
\012\000\014\000\000\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\000\000\014\000\014\000\000\000\014\000\000\000\
\000\000\000\000\014\000\014\000\000\000\000\000\000\000\000\000\
\000\000\014\000\014\000\000\000\000\000\023\000\014\000\000\000\
\000\000\000\000\000\000\000\000\014\000\014\000\000\000\000\000\
\014\000\000\000\014\000\000\000\014\000\000\000\082\000\082\000\
\082\000\082\000\082\000\000\000\082\000\000\000\082\000\082\000\
\082\000\082\000\082\000\082\000\082\000\000\000\082\000\082\000\
\000\000\082\000\000\000\022\000\000\000\082\000\082\000\000\000\
\000\000\000\000\000\000\000\000\000\000\082\000\000\000\000\000\
\000\000\082\000\000\000\000\000\000\000\000\000\000\000\082\000\
\003\000\000\000\000\000\082\000\000\000\082\000\026\000\082\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\000\000\
\026\000\026\000\000\000\026\000\000\000\025\000\000\000\026\000\
\026\000\000\000\000\000\000\000\000\000\000\000\026\000\026\000\
\000\000\000\000\000\000\026\000\000\000\000\000\000\000\000\000\
\000\000\026\000\026\000\000\000\000\000\026\000\000\000\026\000\
\000\000\026\000\016\000\000\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\024\000\016\000\016\000\000\000\016\000\
\000\000\000\000\000\000\016\000\016\000\000\000\018\000\000\000\
\018\000\000\000\016\000\016\000\000\000\000\000\000\000\016\000\
\018\000\018\000\000\000\018\000\000\000\016\000\016\000\018\000\
\018\000\016\000\000\000\016\000\000\000\016\000\018\000\018\000\
\000\000\030\000\000\000\018\000\000\000\000\000\000\000\000\000\
\000\000\018\000\018\000\049\000\050\000\018\000\019\000\018\000\
\019\000\018\000\051\000\000\000\000\000\031\000\000\000\000\000\
\019\000\019\000\000\000\019\000\042\000\000\000\000\000\019\000\
\019\000\000\000\052\000\053\000\000\000\000\000\019\000\019\000\
\000\000\000\000\000\000\019\000\000\000\054\000\000\000\055\000\
\027\000\019\000\019\000\000\000\020\000\019\000\020\000\019\000\
\000\000\019\000\000\000\056\000\000\000\057\000\020\000\020\000\
\000\000\020\000\000\000\000\000\000\000\020\000\020\000\000\000\
\021\000\000\000\021\000\000\000\020\000\020\000\000\000\000\000\
\000\000\020\000\021\000\021\000\000\000\021\000\000\000\020\000\
\020\000\021\000\021\000\020\000\000\000\020\000\000\000\020\000\
\021\000\021\000\000\000\000\000\000\000\021\000\000\000\000\000\
\000\000\000\000\000\000\021\000\021\000\000\000\023\000\021\000\
\023\000\021\000\000\000\021\000\000\000\000\000\000\000\000\000\
\023\000\023\000\000\000\023\000\000\000\000\000\000\000\023\000\
\023\000\000\000\000\000\000\000\000\000\000\000\023\000\023\000\
\000\000\000\000\000\000\023\000\000\000\000\000\000\000\000\000\
\000\000\023\000\023\000\000\000\022\000\023\000\022\000\023\000\
\000\000\023\000\000\000\000\000\000\000\000\000\022\000\022\000\
\000\000\022\000\000\000\000\000\000\000\022\000\022\000\000\000\
\000\000\003\000\000\000\003\000\022\000\022\000\000\000\000\000\
\000\000\022\000\000\000\003\000\003\000\000\000\003\000\022\000\
\022\000\000\000\000\000\022\000\000\000\022\000\025\000\022\000\
\025\000\003\000\003\000\000\000\000\000\000\000\000\000\000\000\
\025\000\025\000\000\000\025\000\003\000\003\000\000\000\000\000\
\025\000\000\000\003\000\036\000\037\000\000\000\025\000\025\000\
\000\000\000\000\038\000\025\000\000\000\000\000\000\000\000\000\
\000\000\025\000\025\000\000\000\024\000\025\000\024\000\025\000\
\000\000\025\000\040\000\041\000\000\000\000\000\024\000\024\000\
\000\000\024\000\000\000\000\000\000\000\042\000\000\000\000\000\
\000\000\043\000\044\000\000\000\024\000\024\000\000\000\146\000\
\000\000\024\000\000\000\045\000\000\000\046\000\000\000\024\000\
\024\000\000\000\030\000\024\000\030\000\024\000\000\000\024\000\
\000\000\000\000\000\000\000\000\030\000\030\000\000\000\030\000\
\000\000\000\000\000\000\000\000\000\000\000\000\031\000\000\000\
\031\000\000\000\030\000\030\000\000\000\042\000\000\000\042\000\
\031\000\031\000\000\000\031\000\000\000\030\000\030\000\042\000\
\042\000\030\000\042\000\030\000\000\000\030\000\031\000\031\000\
\000\000\027\000\000\000\027\000\000\000\042\000\042\000\000\000\
\000\000\031\000\031\000\027\000\027\000\031\000\027\000\031\000\
\042\000\042\000\000\000\000\000\042\000\000\000\042\000\003\000\
\004\000\027\000\027\000\005\000\000\000\000\000\006\000\000\000\
\007\000\000\000\000\000\000\000\027\000\027\000\000\000\000\000\
\008\000\000\000\027\000\009\000\000\000\000\000\010\000\011\000\
\000\000\000\000\012\000\013\000\014\000\000\000\136\000\000\000\
\000\000\015\000\016\000\017\000\000\000\000\000\018\000\019\000\
\020\000\021\000\000\000\000\000\022\000\023\000\000\000\024\000\
\000\000\025\000\003\000\004\000\000\000\000\000\005\000\000\000\
\000\000\006\000\000\000\007\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\008\000\000\000\000\000\009\000\000\000\
\000\000\010\000\011\000\000\000\000\000\012\000\013\000\014\000\
\000\000\000\000\000\000\000\000\015\000\016\000\017\000\000\000\
\000\000\018\000\019\000\020\000\021\000\000\000\000\000\022\000\
\023\000\000\000\024\000\000\000\025\000\047\000\047\000\000\000\
\000\000\000\000\000\000\000\000\047\000\047\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\047\000\000\000\000\000\
\000\000\000\000\051\000\051\000\047\000\047\000\000\000\000\000\
\000\000\051\000\051\000\047\000\000\000\047\000\000\000\047\000\
\000\000\000\000\051\000\047\000\047\000\000\000\000\000\000\000\
\000\000\051\000\051\000\000\000\047\000\047\000\047\000\047\000\
\051\000\000\000\051\000\000\000\051\000\036\000\037\000\000\000\
\051\000\051\000\000\000\000\000\038\000\000\000\000\000\000\000\
\000\000\051\000\051\000\051\000\051\000\000\000\072\000\073\000\
\074\000\075\000\076\000\000\000\040\000\041\000\000\000\077\000\
\078\000\079\000\080\000\081\000\082\000\000\000\092\000\042\000\
\000\000\000\000\000\000\043\000\044\000\083\000\084\000\000\000\
\000\000\000\000\000\000\000\000\000\000\045\000\000\000\046\000\
\000\000\085\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\086\000\000\000\000\000\000\000\087\000\
\072\000\073\000\074\000\075\000\076\000\000\000\000\000\000\000\
\000\000\077\000\078\000\079\000\080\000\081\000\082\000\000\000\
\072\000\073\000\074\000\075\000\076\000\000\000\000\000\083\000\
\084\000\077\000\078\000\079\000\080\000\081\000\082\000\000\000\
\000\000\000\000\000\000\085\000\000\000\000\000\000\000\083\000\
\084\000\109\000\000\000\000\000\000\000\086\000\110\000\000\000\
\000\000\087\000\000\000\085\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\086\000\000\000\000\000\
\000\000\087\000\072\000\073\000\074\000\075\000\076\000\000\000\
\000\000\000\000\000\000\077\000\078\000\079\000\080\000\081\000\
\082\000\000\000\000\000\151\000\072\000\073\000\074\000\075\000\
\076\000\083\000\084\000\000\000\000\000\077\000\078\000\079\000\
\080\000\081\000\082\000\000\000\000\000\085\000\000\000\000\000\
\000\000\000\000\000\000\083\000\084\000\000\000\000\000\086\000\
\000\000\000\000\000\000\087\000\000\000\000\000\000\000\085\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\086\000\000\000\000\000\000\000\087\000\072\000\073\000\
\074\000\075\000\076\000\000\000\000\000\000\000\000\000\077\000\
\078\000\079\000\080\000\081\000\082\000\000\000\072\000\073\000\
\074\000\075\000\076\000\000\000\000\000\083\000\084\000\077\000\
\078\000\079\000\080\000\081\000\082\000\000\000\000\000\000\000\
\000\000\085\000\000\000\000\000\000\000\083\000\084\000\000\000\
\000\000\072\000\073\000\074\000\075\000\076\000\000\000\087\000\
\000\000\085\000\077\000\078\000\079\000\080\000\081\000\082\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\083\000"

let yycheck = "\056\000\
\000\000\006\000\007\000\005\000\109\000\009\001\008\000\031\001\
\059\000\001\000\012\000\001\001\002\001\009\001\009\001\020\000\
\018\000\019\000\008\001\021\000\011\001\033\001\024\000\004\001\
\048\001\006\001\000\000\033\001\052\001\134\000\033\001\136\000\
\050\001\023\001\024\001\025\001\048\001\033\001\033\001\045\001\
\052\001\146\000\033\001\094\000\048\001\035\001\051\000\033\001\
\052\001\039\001\040\001\102\000\000\000\110\000\056\000\022\001\
\050\001\162\000\044\001\049\001\052\001\051\001\003\001\004\001\
\005\001\006\001\071\000\034\001\050\001\000\000\072\000\073\000\
\074\000\075\000\076\000\077\000\078\000\079\000\080\000\081\000\
\082\000\083\000\084\000\085\000\086\000\087\000\009\000\050\001\
\050\001\131\000\092\000\014\000\132\000\098\000\099\000\001\001\
\002\001\255\255\255\255\255\255\255\255\255\255\008\001\255\255\
\000\000\255\255\255\255\255\255\110\000\255\255\255\255\017\001\
\255\255\255\255\255\255\038\000\039\000\255\255\024\001\025\001\
\255\255\044\000\045\000\255\255\047\000\031\001\255\255\255\255\
\255\255\035\001\255\255\255\255\255\255\039\001\040\001\255\255\
\059\000\255\255\143\000\255\255\255\255\255\255\048\001\049\001\
\255\255\051\001\052\001\152\000\255\255\151\000\255\255\255\255\
\255\255\158\000\255\255\255\255\000\000\003\001\004\001\005\001\
\006\001\007\001\255\255\255\255\255\255\001\001\002\001\255\255\
\255\255\005\001\255\255\094\000\008\001\255\255\010\001\255\255\
\255\255\100\000\101\000\102\000\255\255\255\255\018\001\255\255\
\255\255\021\001\255\255\255\255\024\001\025\001\255\255\255\255\
\028\001\029\001\030\001\255\255\032\001\255\255\255\255\035\001\
\036\001\037\001\255\255\255\255\040\001\041\001\042\001\043\001\
\000\000\132\000\046\001\047\001\255\255\049\001\013\000\051\001\
\255\255\016\000\017\000\255\255\255\255\255\255\255\255\022\000\
\023\000\003\001\004\001\005\001\006\001\007\001\255\255\030\000\
\031\000\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\026\001\027\001\255\255\255\255\255\255\255\255\255\255\255\255\
\055\000\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\000\000\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\255\255\022\001\255\255\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\255\255\
\255\255\033\001\034\001\035\001\255\255\037\001\038\001\255\255\
\255\255\255\255\255\255\255\255\044\001\045\001\255\255\255\255\
\048\001\049\001\050\001\051\001\052\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\000\000\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\020\001\255\255\022\001\255\255\024\001\025\001\026\001\027\001\
\255\255\255\255\255\255\255\255\255\255\033\001\034\001\035\001\
\255\255\037\001\038\001\255\255\255\255\255\255\255\255\255\255\
\044\001\045\001\255\255\255\255\048\001\049\001\050\001\051\001\
\052\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\000\000\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\255\255\022\001\255\255\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\255\255\
\255\255\033\001\034\001\035\001\255\255\037\001\038\001\255\255\
\255\255\255\255\255\255\255\255\044\001\045\001\255\255\255\255\
\048\001\049\001\050\001\051\001\052\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\000\000\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\020\001\255\255\022\001\255\255\024\001\025\001\026\001\027\001\
\255\255\255\255\255\255\255\255\255\255\033\001\034\001\035\001\
\255\255\037\001\038\001\255\255\255\255\255\255\255\255\255\255\
\044\001\045\001\255\255\255\255\048\001\049\001\050\001\051\001\
\052\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\000\000\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\255\255\022\001\255\255\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\255\255\
\255\255\033\001\034\001\035\001\255\255\037\001\038\001\255\255\
\255\255\255\255\255\255\255\255\044\001\045\001\255\255\255\255\
\048\001\049\001\050\001\051\001\052\001\255\255\255\255\255\255\
\255\255\255\255\255\255\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\000\000\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\255\255\
\022\001\255\255\024\001\025\001\026\001\027\001\255\255\255\255\
\255\255\255\255\255\255\033\001\034\001\035\001\255\255\037\001\
\038\001\255\255\255\255\255\255\255\255\255\255\044\001\045\001\
\255\255\255\255\048\001\049\001\050\001\051\001\052\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\000\000\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\019\001\020\001\255\255\022\001\255\255\024\001\025\001\
\026\001\027\001\255\255\255\255\255\255\255\255\255\255\033\001\
\034\001\035\001\255\255\037\001\038\001\255\255\255\255\255\255\
\255\255\255\255\044\001\045\001\255\255\255\255\048\001\049\001\
\050\001\051\001\052\001\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\000\000\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\255\255\
\022\001\255\255\024\001\025\001\026\001\027\001\255\255\255\255\
\255\255\255\255\255\255\033\001\034\001\035\001\255\255\037\001\
\038\001\255\255\255\255\255\255\255\255\255\255\044\001\045\001\
\255\255\255\255\048\001\049\001\050\001\051\001\052\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\000\000\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\019\001\020\001\255\255\022\001\255\255\024\001\025\001\
\026\001\027\001\255\255\255\255\255\255\255\255\255\255\033\001\
\034\001\035\001\255\255\037\001\038\001\255\255\255\255\255\255\
\255\255\255\255\044\001\045\001\255\255\255\255\048\001\049\001\
\050\001\051\001\052\001\255\255\000\000\003\001\004\001\005\001\
\006\001\007\001\255\255\009\001\255\255\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\255\255\
\022\001\255\255\255\255\255\255\026\001\027\001\255\255\255\255\
\255\255\255\255\255\255\033\001\034\001\255\255\255\255\255\255\
\038\001\255\255\255\255\255\255\255\255\255\255\044\001\045\001\
\000\000\255\255\048\001\255\255\050\001\255\255\052\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\003\001\
\004\001\005\001\006\001\007\001\255\255\009\001\255\255\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\020\001\255\255\022\001\255\255\255\255\255\255\026\001\027\001\
\255\255\255\255\255\255\255\255\255\255\255\255\034\001\255\255\
\255\255\255\255\038\001\000\000\255\255\255\255\255\255\255\255\
\044\001\045\001\255\255\255\255\048\001\255\255\050\001\255\255\
\052\001\255\255\255\255\003\001\004\001\005\001\006\001\007\001\
\255\255\009\001\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\255\255\022\001\255\255\
\255\255\255\255\026\001\027\001\255\255\000\000\255\255\255\255\
\255\255\255\255\034\001\255\255\255\255\255\255\038\001\255\255\
\255\255\255\255\255\255\255\255\044\001\045\001\255\255\255\255\
\048\001\255\255\050\001\255\255\052\001\255\255\255\255\003\001\
\004\001\005\001\006\001\007\001\255\255\009\001\255\255\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\020\001\000\000\022\001\255\255\255\255\255\255\026\001\027\001\
\255\255\255\255\255\255\255\255\255\255\255\255\034\001\255\255\
\255\255\255\255\038\001\255\255\255\255\000\000\255\255\255\255\
\044\001\045\001\255\255\255\255\048\001\255\255\050\001\255\255\
\052\001\255\255\255\255\003\001\004\001\005\001\006\001\007\001\
\255\255\009\001\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\255\255\022\001\255\255\
\255\255\255\255\026\001\027\001\255\255\000\000\255\255\255\255\
\255\255\255\255\034\001\255\255\255\255\255\255\038\001\255\255\
\255\255\255\255\255\255\255\255\044\001\045\001\255\255\003\001\
\048\001\005\001\050\001\007\001\052\001\009\001\255\255\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\020\001\255\255\022\001\000\000\255\255\255\255\026\001\027\001\
\255\255\255\255\255\255\255\255\255\255\033\001\034\001\255\255\
\255\255\255\255\038\001\255\255\255\255\255\255\255\255\000\000\
\044\001\045\001\255\255\003\001\048\001\005\001\050\001\007\001\
\052\001\009\001\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\255\255\022\001\255\255\
\255\255\255\255\026\001\027\001\255\255\255\255\255\255\255\255\
\255\255\033\001\034\001\255\255\255\255\000\000\038\001\255\255\
\255\255\255\255\255\255\255\255\044\001\045\001\255\255\255\255\
\048\001\255\255\050\001\255\255\052\001\255\255\003\001\004\001\
\005\001\006\001\007\001\255\255\009\001\255\255\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\019\001\020\001\
\255\255\022\001\255\255\000\000\255\255\026\001\027\001\255\255\
\255\255\255\255\255\255\255\255\255\255\034\001\255\255\255\255\
\255\255\038\001\255\255\255\255\255\255\255\255\255\255\044\001\
\000\000\255\255\255\255\048\001\255\255\050\001\009\001\052\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\019\001\020\001\255\255\022\001\255\255\000\000\255\255\026\001\
\027\001\255\255\255\255\255\255\255\255\255\255\033\001\034\001\
\255\255\255\255\255\255\038\001\255\255\255\255\255\255\255\255\
\255\255\044\001\045\001\255\255\255\255\048\001\255\255\050\001\
\255\255\052\001\009\001\255\255\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\000\000\019\001\020\001\255\255\022\001\
\255\255\255\255\255\255\026\001\027\001\255\255\009\001\255\255\
\011\001\255\255\033\001\034\001\255\255\255\255\255\255\038\001\
\019\001\020\001\255\255\022\001\255\255\044\001\045\001\026\001\
\027\001\048\001\255\255\050\001\255\255\052\001\033\001\034\001\
\255\255\000\000\255\255\038\001\255\255\255\255\255\255\255\255\
\255\255\044\001\045\001\001\001\002\001\048\001\009\001\050\001\
\011\001\052\001\008\001\255\255\255\255\000\000\255\255\255\255\
\019\001\020\001\255\255\022\001\000\000\255\255\255\255\026\001\
\027\001\255\255\024\001\025\001\255\255\255\255\033\001\034\001\
\255\255\255\255\255\255\038\001\255\255\035\001\255\255\037\001\
\000\000\044\001\045\001\255\255\009\001\048\001\011\001\050\001\
\255\255\052\001\255\255\049\001\255\255\051\001\019\001\020\001\
\255\255\022\001\255\255\255\255\255\255\026\001\027\001\255\255\
\009\001\255\255\011\001\255\255\033\001\034\001\255\255\255\255\
\255\255\038\001\019\001\020\001\255\255\022\001\255\255\044\001\
\045\001\026\001\027\001\048\001\255\255\050\001\255\255\052\001\
\033\001\034\001\255\255\255\255\255\255\038\001\255\255\255\255\
\255\255\255\255\255\255\044\001\045\001\255\255\009\001\048\001\
\011\001\050\001\255\255\052\001\255\255\255\255\255\255\255\255\
\019\001\020\001\255\255\022\001\255\255\255\255\255\255\026\001\
\027\001\255\255\255\255\255\255\255\255\255\255\033\001\034\001\
\255\255\255\255\255\255\038\001\255\255\255\255\255\255\255\255\
\255\255\044\001\045\001\255\255\009\001\048\001\011\001\050\001\
\255\255\052\001\255\255\255\255\255\255\255\255\019\001\020\001\
\255\255\022\001\255\255\255\255\255\255\026\001\027\001\255\255\
\255\255\009\001\255\255\011\001\033\001\034\001\255\255\255\255\
\255\255\038\001\255\255\019\001\020\001\255\255\022\001\044\001\
\045\001\255\255\255\255\048\001\255\255\050\001\009\001\052\001\
\011\001\033\001\034\001\255\255\255\255\255\255\255\255\255\255\
\019\001\020\001\255\255\022\001\044\001\045\001\255\255\255\255\
\027\001\255\255\050\001\001\001\002\001\255\255\033\001\034\001\
\255\255\255\255\008\001\038\001\255\255\255\255\255\255\255\255\
\255\255\044\001\045\001\255\255\009\001\048\001\011\001\050\001\
\255\255\052\001\024\001\025\001\255\255\255\255\019\001\020\001\
\255\255\022\001\255\255\255\255\255\255\035\001\255\255\255\255\
\255\255\039\001\040\001\255\255\033\001\034\001\255\255\045\001\
\255\255\038\001\255\255\049\001\255\255\051\001\255\255\044\001\
\045\001\255\255\009\001\048\001\011\001\050\001\255\255\052\001\
\255\255\255\255\255\255\255\255\019\001\020\001\255\255\022\001\
\255\255\255\255\255\255\255\255\255\255\255\255\009\001\255\255\
\011\001\255\255\033\001\034\001\255\255\009\001\255\255\011\001\
\019\001\020\001\255\255\022\001\255\255\044\001\045\001\019\001\
\020\001\048\001\022\001\050\001\255\255\052\001\033\001\034\001\
\255\255\009\001\255\255\011\001\255\255\033\001\034\001\255\255\
\255\255\044\001\045\001\019\001\020\001\048\001\022\001\050\001\
\044\001\045\001\255\255\255\255\048\001\255\255\050\001\001\001\
\002\001\033\001\034\001\005\001\255\255\255\255\008\001\255\255\
\010\001\255\255\255\255\255\255\044\001\045\001\255\255\255\255\
\018\001\255\255\050\001\021\001\255\255\255\255\024\001\025\001\
\255\255\255\255\028\001\029\001\030\001\255\255\032\001\255\255\
\255\255\035\001\036\001\037\001\255\255\255\255\040\001\041\001\
\042\001\043\001\255\255\255\255\046\001\047\001\255\255\049\001\
\255\255\051\001\001\001\002\001\255\255\255\255\005\001\255\255\
\255\255\008\001\255\255\010\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\018\001\255\255\255\255\021\001\255\255\
\255\255\024\001\025\001\255\255\255\255\028\001\029\001\030\001\
\255\255\255\255\255\255\255\255\035\001\036\001\037\001\255\255\
\255\255\040\001\041\001\042\001\043\001\255\255\255\255\046\001\
\047\001\255\255\049\001\255\255\051\001\001\001\002\001\255\255\
\255\255\255\255\255\255\255\255\008\001\009\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\017\001\255\255\255\255\
\255\255\255\255\001\001\002\001\024\001\025\001\255\255\255\255\
\255\255\008\001\009\001\031\001\255\255\033\001\255\255\035\001\
\255\255\255\255\017\001\039\001\040\001\255\255\255\255\255\255\
\255\255\024\001\025\001\255\255\048\001\049\001\050\001\051\001\
\031\001\255\255\033\001\255\255\035\001\001\001\002\001\255\255\
\039\001\040\001\255\255\255\255\008\001\255\255\255\255\255\255\
\255\255\048\001\049\001\050\001\051\001\255\255\003\001\004\001\
\005\001\006\001\007\001\255\255\024\001\025\001\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\019\001\035\001\
\255\255\255\255\255\255\039\001\040\001\026\001\027\001\255\255\
\255\255\255\255\255\255\255\255\255\255\049\001\255\255\051\001\
\255\255\038\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\048\001\255\255\255\255\255\255\052\001\
\003\001\004\001\005\001\006\001\007\001\255\255\255\255\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\003\001\004\001\005\001\006\001\007\001\255\255\255\255\026\001\
\027\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\255\255\255\255\038\001\255\255\255\255\255\255\026\001\
\027\001\044\001\255\255\255\255\255\255\048\001\033\001\255\255\
\255\255\052\001\255\255\038\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\048\001\255\255\255\255\
\255\255\052\001\003\001\004\001\005\001\006\001\007\001\255\255\
\255\255\255\255\255\255\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\255\255\020\001\003\001\004\001\005\001\006\001\
\007\001\026\001\027\001\255\255\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\255\255\038\001\255\255\255\255\
\255\255\255\255\255\255\026\001\027\001\255\255\255\255\048\001\
\255\255\255\255\255\255\052\001\255\255\255\255\255\255\038\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\048\001\255\255\255\255\255\255\052\001\003\001\004\001\
\005\001\006\001\007\001\255\255\255\255\255\255\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\003\001\004\001\
\005\001\006\001\007\001\255\255\255\255\026\001\027\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\255\255\
\255\255\038\001\255\255\255\255\255\255\026\001\027\001\255\255\
\255\255\003\001\004\001\005\001\006\001\007\001\255\255\052\001\
\255\255\038\001\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\026\001"

let yynames_const = "\
  PLUS\000\
  TIMES\000\
  MINUS\000\
  DIV\000\
  MOD\000\
  LPAREN\000\
  RPAREN\000\
  BEGIN\000\
  END\000\
  EOF\000\
  L\000\
  LE\000\
  G\000\
  GE\000\
  NE\000\
  EQ\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  REC\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  NOT\000\
  PRINT\000\
  FUN\000\
  FLECHE\000\
  FUNCTION\000\
  SCOLON\000\
  DSCOLON\000\
  UNIT\000\
  REF\000\
  EXCL\000\
  REVAL\000\
  UNDERSCORE\000\
  E\000\
  RAISE\000\
  TRY\000\
  MATCH\000\
  WITH\000\
  PIPE\000\
  INCR\000\
  DECR\000\
  COMMA\000\
  LLIST\000\
  RLIST\000\
  EMPTYLIST\000\
  CONS\000\
  "

let yynames_block = "\
  INT\000\
  VAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'top_expr) in
    Obj.repr(
# 76 "parser.mly"
                                                       ( _1 )
# 797 "parser.ml"
               : Types.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr_seq) in
    Obj.repr(
# 79 "parser.mly"
                                                       ( _1 )
# 804 "parser.ml"
               : 'top_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 83 "parser.mly"
                                                       ( _1 )
# 811 "parser.ml"
               : 'expr_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_seq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_seq) in
    Obj.repr(
# 84 "parser.mly"
                                                       ( Seq (_1,_3) )
# 819 "parser.ml"
               : 'expr_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 89 "parser.mly"
                                                       ( Const _1 )
# 826 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 90 "parser.mly"
                                                       ( BConst true )
# 832 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "parser.mly"
                                                       ( BConst false )
# 838 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 92 "parser.mly"
                                                       ( Var (MNom _1) )
# 845 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 93 "parser.mly"
                                                       ( Unit )
# 851 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_seq) in
    Obj.repr(
# 94 "parser.mly"
                                                       ( _2 )
# 858 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_seq) in
    Obj.repr(
# 95 "parser.mly"
                                                       ( _2 )
# 865 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 96 "parser.mly"
                                                       ( ArithOp (Add,_1,_3) )
# 873 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 97 "parser.mly"
                                                       ( ArithOp (Mul,_1,_3) )
# 881 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 98 "parser.mly"
                                                       ( ArithOp (Min,_1,_3) )
# 889 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 99 "parser.mly"
                                                       ( ArithOp (Div,_1,_3) )
# 897 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 100 "parser.mly"
                                                       ( ArithOp (Mod,_1,_3) )
# 905 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 101 "parser.mly"
                                                       ( ArithOp (Min,Const 0, _2) )
# 912 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 102 "parser.mly"
                                                       ( CompOp (L,_1,_3) )
# 920 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 103 "parser.mly"
                                                       ( CompOp (Le,_1,_3) )
# 928 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 104 "parser.mly"
                                                       ( CompOp (G,_1,_3) )
# 936 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 105 "parser.mly"
                                                       ( CompOp (Ge,_1,_3) )
# 944 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 106 "parser.mly"
                                                       ( CompOp (Eq,_1,_3) )
# 952 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 107 "parser.mly"
                                                       ( CompOp (Ne,_1,_3) )
# 960 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 108 "parser.mly"
                                                       ( BoolOp (Or,_1,_3) )
# 968 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 109 "parser.mly"
                                                       ( BoolOp (And,_1,_3) )
# 976 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 110 "parser.mly"
                                                       ( BoolOp (Not,_2, BConst true) )
# 983 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 111 "parser.mly"
                                                       ( If (_2,_4,_6) )
# 992 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'motif) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'corps_func) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'groupe_decla) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr_seq) in
    Obj.repr(
# 112 "parser.mly"
                                                       ( Let (false,_2,_3,_4,_5) )
# 1002 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'motif) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'corps_func) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'groupe_decla) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr_seq) in
    Obj.repr(
# 113 "parser.mly"
                                                       ( Let (true,_3,_4,_5,_6) )
# 1012 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 114 "parser.mly"
                                                       ( RefNew (_1,_3) )
# 1020 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 115 "parser.mly"
                                                       ( CoupleExpr (_1,_3) )
# 1028 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 116 "parser.mly"
                                                       ( Exn _2 )
# 1035 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 117 "parser.mly"
                                                       ( Raise _2 )
# 1042 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr_seq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 118 "parser.mly"
                                                       ( TryWith (_2,_4) )
# 1050 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 119 "parser.mly"
                                                       ( ValRef (_2) )
# 1057 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 120 "parser.mly"
                                                       ( Ref _2 )
# 1064 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 121 "parser.mly"
                                                       ( InDecr (_2,true) )
# 1071 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 122 "parser.mly"
                                                       ( InDecr (_2,false) )
# 1078 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 123 "parser.mly"
                                                       ( PrInt (_2) )
# 1085 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'motif) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'corps_func) in
    Obj.repr(
# 124 "parser.mly"
                                                       ( Fun (_2,_3) )
# 1093 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'applic) in
    Obj.repr(
# 125 "parser.mly"
                                                       ( _1 )
# 1100 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 126 "parser.mly"
                                                       ( Cons (_1,_3) )
# 1108 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 127 "parser.mly"
                                                       ( EmptyList )
# 1114 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'liste) in
    Obj.repr(
# 128 "parser.mly"
                                                       ( _2 )
# 1121 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 129 "parser.mly"
                                                       ( MatchWith (_2,_4) )
# 1129 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'motif) in
    Obj.repr(
# 133 "parser.mly"
                                                       ( _2 )
# 1136 "parser.ml"
               : 'motif))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'motif) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'motif) in
    Obj.repr(
# 134 "parser.mly"
                                                       ( MCouple (_1,_3) )
# 1144 "parser.ml"
               : 'motif))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 135 "parser.mly"
                                                       ( MNom _1 )
# 1151 "parser.ml"
               : 'motif))
; (fun __caml_parser_env ->
    Obj.repr(
# 136 "parser.mly"
                                                       ( MNone )
# 1157 "parser.ml"
               : 'motif))
; (fun __caml_parser_env ->
    Obj.repr(
# 137 "parser.mly"
                                                       ( MUnit )
# 1163 "parser.ml"
               : 'motif))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'motif) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'motif) in
    Obj.repr(
# 138 "parser.mly"
                                                       ( MCons (_1,_3) )
# 1171 "parser.ml"
               : 'motif))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'motif_list) in
    Obj.repr(
# 139 "parser.mly"
                                                            ( _2 )
# 1178 "parser.ml"
               : 'motif))
; (fun __caml_parser_env ->
    Obj.repr(
# 140 "parser.mly"
                                                       ( MEmptyList )
# 1184 "parser.ml"
               : 'motif))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'motif) in
    Obj.repr(
# 141 "parser.mly"
                                                       ( MExcp (_2) )
# 1191 "parser.ml"
               : 'motif))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 142 "parser.mly"
                                                       ( MExpr (Const _1))
# 1198 "parser.ml"
               : 'motif))
; (fun __caml_parser_env ->
    Obj.repr(
# 143 "parser.mly"
                                                       ( MExpr (BConst true))
# 1204 "parser.ml"
               : 'motif))
; (fun __caml_parser_env ->
    Obj.repr(
# 144 "parser.mly"
                                                       ( MExpr (BConst false))
# 1210 "parser.ml"
               : 'motif))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_seq) in
    Obj.repr(
# 149 "parser.mly"
                                                       ( _2 )
# 1217 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 150 "parser.mly"
                                                       ( Var (MNom _1) )
# 1224 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 151 "parser.mly"
                                                       ( Const _1 )
# 1231 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 152 "parser.mly"
                                                       ( BConst true)
# 1237 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 153 "parser.mly"
                                                       ( BConst false )
# 1243 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 154 "parser.mly"
                                                       ( ValRef (_2) )
# 1250 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 155 "parser.mly"
                                                       ( Unit )
# 1256 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'liste) in
    Obj.repr(
# 156 "parser.mly"
                                                       ( _2 )
# 1263 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 157 "parser.mly"
                                                       ( EmptyList )
# 1269 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'motif) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'corps_func) in
    Obj.repr(
# 161 "parser.mly"
                                                       ( Fun (_1,_2) )
# 1277 "parser.ml"
               : 'corps_func))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr_seq) in
    Obj.repr(
# 162 "parser.mly"
                                                       ( _2 )
# 1284 "parser.ml"
               : 'corps_func))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr_seq) in
    Obj.repr(
# 163 "parser.mly"
                                                       ( _2 )
# 1291 "parser.ml"
               : 'corps_func))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 164 "parser.mly"
                                                       ( Fun (MNom "_",MatchWith(Var (MNom "_"),_3)) )
# 1298 "parser.ml"
               : 'corps_func))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 165 "parser.mly"
                                                       ( Fun (MNom "_",MatchWith(Var (MNom "_"),_3)) )
# 1305 "parser.ml"
               : 'corps_func))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'applic) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 169 "parser.mly"
                                                       ( App (_1,_2) )
# 1313 "parser.ml"
               : 'applic))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'sexpr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 170 "parser.mly"
                                                       ( App (_1,_2) )
# 1321 "parser.ml"
               : 'applic))
; (fun __caml_parser_env ->
    Obj.repr(
# 174 "parser.mly"
                                                       ( false )
# 1327 "parser.ml"
               : 'groupe_decla))
; (fun __caml_parser_env ->
    Obj.repr(
# 175 "parser.mly"
                                                       ( true )
# 1333 "parser.ml"
               : 'groupe_decla))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'liste) in
    Obj.repr(
# 179 "parser.mly"
                                                       ( Cons (_1,_3) )
# 1341 "parser.ml"
               : 'liste))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 180 "parser.mly"
                                                       ( Cons (_1,EmptyList) )
# 1348 "parser.ml"
               : 'liste))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'motif) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'motif_list) in
    Obj.repr(
# 183 "parser.mly"
                                                       ( MCons (_1, _3) )
# 1356 "parser.ml"
               : 'motif_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'motif) in
    Obj.repr(
# 184 "parser.mly"
                                                       ( MCons (_1, MEmptyList) )
# 1363 "parser.ml"
               : 'motif_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 188 "parser.mly"
                                                       ( _2 )
# 1370 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'motif) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr_seq) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 189 "parser.mly"
                                                       ( (_1,_3)::_5 )
# 1379 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'motif) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_seq) in
    Obj.repr(
# 190 "parser.mly"
                                                       ( [(_1,_3)] )
# 1387 "parser.ml"
               : 'pattern))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Types.expr)
