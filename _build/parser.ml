type token =
  | INT of (int)
  | VAR of (string)
  | PLUS
  | TIMES
  | MINUS
  | DIV
  | MOD
  | LPAREN
  | RPAREN
  | BEGIN
  | END
  | EOF
  | L
  | LE
  | G
  | GE
  | NE
  | EQ
  | IF
  | THEN
  | ELSE
  | LET
  | IN
  | REC
  | TRUE
  | FALSE
  | AND
  | OR
  | NOT
  | PRINT
  | FUN
  | FLECHE
  | SCOLON
  | DSCOLON
  | UNIT
  | REF
  | EXCL
  | REVAL
  | UNDERSCORE
  | E
  | RAISE
  | TRY
  | WITH
  | INCR
  | COMMA

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* --- pr√©ambule: ici du code Caml --- *)

open Types   (* rappel: dans Types.ml: 
             type expr = Const of int | Add of expr*expr | Mull of expr*expr *)

# 57 "parser.ml"
let yytransl_const = [|
  259 (* PLUS *);
  260 (* TIMES *);
  261 (* MINUS *);
  262 (* DIV *);
  263 (* MOD *);
  264 (* LPAREN *);
  265 (* RPAREN *);
  266 (* BEGIN *);
  267 (* END *);
    0 (* EOF *);
  268 (* L *);
  269 (* LE *);
  270 (* G *);
  271 (* GE *);
  272 (* NE *);
  273 (* EQ *);
  274 (* IF *);
  275 (* THEN *);
  276 (* ELSE *);
  277 (* LET *);
  278 (* IN *);
  279 (* REC *);
  280 (* TRUE *);
  281 (* FALSE *);
  282 (* AND *);
  283 (* OR *);
  284 (* NOT *);
  285 (* PRINT *);
  286 (* FUN *);
  287 (* FLECHE *);
  288 (* SCOLON *);
  289 (* DSCOLON *);
  290 (* UNIT *);
  291 (* REF *);
  292 (* EXCL *);
  293 (* REVAL *);
  294 (* UNDERSCORE *);
  295 (* E *);
  296 (* RAISE *);
  297 (* TRY *);
  298 (* WITH *);
  299 (* INCR *);
  300 (* COMMA *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* VAR *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\003\000\003\000\003\000\003\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\006\000\006\000\
\004\000\004\000\004\000\007\000\007\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\001\000\001\000\001\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\002\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\002\000\006\000\
\003\000\004\000\005\000\004\000\003\000\002\000\003\000\003\000\
\003\000\003\000\002\000\002\000\006\000\002\000\002\000\002\000\
\002\000\001\000\001\000\003\000\003\000\001\000\001\000\003\000\
\001\000\001\000\001\000\001\000\002\000\001\000\002\000\002\000\
\002\000\003\000\003\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\062\000\000\000\000\000\
\042\000\000\000\046\000\000\000\047\000\000\000\055\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\050\000\049\000\
\000\000\051\000\052\000\054\000\000\000\041\000\056\000\039\000\
\000\000\000\000\000\000\000\000\040\000\000\000\000\000\000\000\
\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\061\000\060\000\000\000\000\000\000\000\000\000\057\000\000\000\
\008\000\000\000\000\000\000\000\025\000\000\000\053\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\034\000\044\000\000\000\000\000\045\000\000\000\000\000\
\026\000\000\000\048\000\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yydgoto = "\002\000\
\022\000\023\000\030\000\031\000\024\000\025\000\026\000"

let yysindex = "\009\000\
\100\255\000\000\000\000\005\255\100\255\100\255\100\255\100\255\
\104\255\000\000\000\000\100\255\127\001\010\255\000\000\127\001\
\127\001\100\255\100\255\100\255\127\001\000\000\143\001\127\001\
\000\000\127\001\000\000\010\255\000\000\006\255\000\000\223\254\
\141\255\176\255\211\255\010\255\039\255\088\255\000\000\000\000\
\100\255\000\000\000\000\000\000\127\001\000\000\000\000\000\000\
\000\000\223\254\223\254\094\004\000\000\100\255\100\255\100\255\
\100\255\100\255\000\000\100\255\100\255\100\255\100\255\100\255\
\100\255\100\255\100\255\100\255\100\255\100\255\100\255\100\255\
\000\000\000\000\247\254\100\255\100\255\010\255\000\000\000\000\
\000\000\100\255\082\255\100\255\000\000\136\004\000\000\100\255\
\036\255\223\254\036\255\223\254\027\255\088\255\088\255\088\255\
\088\255\088\255\088\255\020\005\088\005\062\005\020\005\241\004\
\062\005\000\000\000\000\088\255\046\005\000\000\171\004\100\255\
\000\000\088\255\000\000\206\004\100\255\088\255\100\255\046\005\
\046\005"

let yyrindex = "\000\000\
\000\000\000\000\001\000\011\001\000\000\000\000\000\000\000\000\
\000\000\045\000\089\000\000\000\000\000\000\000\133\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\055\001\000\000\000\000\000\000\000\000\000\000\187\001\
\000\000\000\000\000\000\000\000\000\000\210\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\177\000\231\001\019\002\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\099\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\221\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\140\002\063\002\178\002\104\002\249\002\018\003\037\003\062\003\
\081\003\106\003\125\003\053\004\207\003\234\003\072\004\197\002\
\250\003\000\000\000\000\144\003\021\004\000\000\000\000\000\000\
\000\000\163\003\000\000\000\000\000\000\188\003\000\000\028\004\
\047\004"

let yygindex = "\000\000\
\000\000\253\255\254\255\248\255\243\001\000\000\000\000"

let yytablesize = 1668
let yytable = "\107\000\
\002\000\032\000\033\000\034\000\035\000\047\000\037\000\027\000\
\038\000\001\000\072\000\027\000\028\000\028\000\050\000\051\000\
\052\000\028\000\000\000\000\000\000\000\079\000\076\000\000\000\
\000\000\075\000\000\000\000\000\085\000\054\000\055\000\056\000\
\057\000\083\000\078\000\000\000\077\000\086\000\000\000\055\000\
\027\000\057\000\029\000\029\000\003\000\000\000\028\000\029\000\
\000\000\078\000\089\000\090\000\091\000\092\000\093\000\084\000\
\094\000\095\000\096\000\097\000\098\000\099\000\100\000\101\000\
\102\000\103\000\104\000\105\000\106\000\000\000\072\000\000\000\
\108\000\109\000\113\000\110\000\029\000\000\000\111\000\072\000\
\114\000\000\000\078\000\027\000\116\000\000\000\000\000\000\000\
\004\000\028\000\054\000\055\000\056\000\057\000\058\000\000\000\
\000\000\000\000\112\000\000\000\003\000\004\000\000\000\000\000\
\005\000\027\000\000\000\006\000\118\000\007\000\000\000\028\000\
\000\000\120\000\000\000\121\000\000\000\008\000\000\000\029\000\
\009\000\000\000\000\000\010\000\011\000\078\000\036\000\012\000\
\013\000\014\000\000\000\072\000\006\000\015\000\016\000\017\000\
\000\000\000\000\018\000\019\000\020\000\029\000\021\000\054\000\
\055\000\056\000\057\000\058\000\000\000\080\000\000\000\000\000\
\060\000\061\000\062\000\063\000\064\000\065\000\000\000\000\000\
\000\000\000\000\066\000\000\000\000\000\000\000\067\000\068\000\
\000\000\000\000\000\000\000\000\069\000\070\000\000\000\000\000\
\038\000\071\000\054\000\055\000\056\000\057\000\058\000\000\000\
\072\000\000\000\081\000\060\000\061\000\062\000\063\000\064\000\
\065\000\000\000\000\000\000\000\000\000\066\000\000\000\000\000\
\000\000\067\000\068\000\000\000\000\000\000\000\000\000\069\000\
\070\000\000\000\000\000\000\000\071\000\054\000\055\000\056\000\
\057\000\058\000\000\000\072\000\007\000\000\000\060\000\061\000\
\062\000\063\000\064\000\065\000\000\000\082\000\000\000\000\000\
\066\000\000\000\000\000\000\000\067\000\068\000\000\000\000\000\
\000\000\000\000\069\000\070\000\000\000\000\000\000\000\071\000\
\000\000\000\000\000\000\000\000\000\000\000\000\072\000\000\000\
\000\000\050\000\050\000\002\000\002\000\002\000\002\000\002\000\
\050\000\002\000\005\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\000\000\002\000\002\000\000\000\002\000\000\000\
\050\000\050\000\002\000\002\000\000\000\000\000\000\000\002\000\
\002\000\002\000\050\000\000\000\050\000\002\000\000\000\000\000\
\000\000\000\000\002\000\000\000\002\000\051\000\051\000\003\000\
\003\000\003\000\003\000\003\000\051\000\003\000\043\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\000\000\003\000\
\003\000\000\000\003\000\000\000\051\000\051\000\003\000\003\000\
\000\000\000\000\000\000\003\000\003\000\003\000\051\000\000\000\
\051\000\003\000\000\000\000\000\000\000\000\000\003\000\000\000\
\003\000\052\000\052\000\004\000\004\000\004\000\004\000\004\000\
\052\000\004\000\030\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\000\000\004\000\004\000\000\000\004\000\000\000\
\052\000\052\000\004\000\004\000\000\000\000\000\000\000\004\000\
\004\000\004\000\052\000\000\000\052\000\004\000\000\000\000\000\
\000\000\000\000\004\000\000\000\004\000\054\000\054\000\006\000\
\006\000\006\000\006\000\006\000\054\000\006\000\059\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\000\000\006\000\
\006\000\000\000\006\000\000\000\054\000\054\000\006\000\006\000\
\000\000\000\000\000\000\006\000\006\000\006\000\054\000\000\000\
\054\000\006\000\000\000\000\000\000\000\000\000\006\000\000\000\
\006\000\053\000\053\000\038\000\038\000\038\000\038\000\038\000\
\053\000\038\000\014\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\000\000\038\000\038\000\000\000\038\000\000\000\
\053\000\053\000\038\000\038\000\000\000\000\000\000\000\038\000\
\038\000\038\000\053\000\000\000\053\000\038\000\000\000\000\000\
\000\000\000\000\038\000\000\000\038\000\048\000\048\000\007\000\
\007\000\007\000\007\000\007\000\048\000\007\000\035\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\000\000\007\000\
\007\000\000\000\007\000\000\000\048\000\048\000\007\000\007\000\
\000\000\000\000\000\000\007\000\007\000\007\000\048\000\046\000\
\048\000\007\000\048\000\049\000\000\000\000\000\007\000\053\000\
\007\000\000\000\073\000\049\000\074\000\005\000\005\000\005\000\
\005\000\005\000\036\000\005\000\000\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\000\000\005\000\005\000\087\000\
\005\000\000\000\049\000\049\000\005\000\005\000\000\000\000\000\
\000\000\005\000\005\000\005\000\049\000\000\000\049\000\005\000\
\000\000\000\000\000\000\000\000\005\000\000\000\005\000\000\000\
\000\000\043\000\043\000\043\000\043\000\043\000\010\000\043\000\
\000\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\000\000\043\000\043\000\000\000\043\000\000\000\000\000\000\000\
\043\000\043\000\000\000\000\000\000\000\043\000\043\000\043\000\
\000\000\000\000\000\000\043\000\000\000\000\000\000\000\000\000\
\043\000\000\000\043\000\000\000\000\000\030\000\030\000\012\000\
\030\000\030\000\000\000\030\000\000\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\000\000\030\000\030\000\000\000\
\030\000\000\000\000\000\000\000\030\000\030\000\000\000\039\000\
\040\000\030\000\030\000\030\000\000\000\000\000\041\000\030\000\
\000\000\000\000\000\000\009\000\030\000\000\000\030\000\000\000\
\000\000\054\000\055\000\056\000\057\000\058\000\042\000\043\000\
\000\000\000\000\060\000\061\000\062\000\063\000\064\000\065\000\
\044\000\000\000\045\000\000\000\066\000\000\000\000\000\000\000\
\067\000\068\000\000\000\000\000\000\000\000\000\069\000\070\000\
\000\000\011\000\000\000\071\000\000\000\000\000\000\000\000\000\
\000\000\000\000\072\000\000\000\000\000\014\000\014\000\014\000\
\014\000\014\000\000\000\014\000\031\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\000\000\014\000\014\000\000\000\
\014\000\023\000\000\000\000\000\014\000\014\000\000\000\000\000\
\000\000\014\000\014\000\014\000\000\000\000\000\000\000\014\000\
\000\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\
\000\000\035\000\035\000\035\000\035\000\035\000\000\000\035\000\
\000\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\013\000\035\000\035\000\000\000\035\000\000\000\000\000\000\000\
\035\000\035\000\000\000\000\000\000\000\035\000\035\000\035\000\
\000\000\000\000\000\000\035\000\000\000\000\000\000\000\000\000\
\035\000\015\000\000\000\000\000\000\000\036\000\036\000\036\000\
\036\000\036\000\000\000\036\000\000\000\036\000\036\000\036\000\
\036\000\036\000\036\000\036\000\016\000\036\000\036\000\000\000\
\036\000\000\000\000\000\000\000\036\000\036\000\000\000\000\000\
\000\000\036\000\036\000\036\000\000\000\000\000\000\000\036\000\
\000\000\000\000\000\000\000\000\036\000\017\000\000\000\000\000\
\000\000\010\000\010\000\010\000\010\000\010\000\000\000\010\000\
\000\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\018\000\010\000\010\000\000\000\010\000\000\000\000\000\000\000\
\010\000\010\000\000\000\000\000\000\000\010\000\010\000\010\000\
\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\
\010\000\020\000\012\000\012\000\012\000\012\000\012\000\000\000\
\012\000\000\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\000\000\012\000\012\000\019\000\012\000\000\000\000\000\
\000\000\012\000\012\000\000\000\000\000\000\000\012\000\012\000\
\012\000\000\000\000\000\000\000\012\000\000\000\009\000\058\000\
\009\000\012\000\009\000\000\000\009\000\000\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\000\000\009\000\009\000\
\000\000\009\000\028\000\000\000\000\000\009\000\009\000\000\000\
\000\000\000\000\009\000\009\000\009\000\000\000\000\000\000\000\
\009\000\000\000\000\000\000\000\011\000\009\000\011\000\000\000\
\011\000\000\000\011\000\027\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\000\000\011\000\011\000\000\000\011\000\
\000\000\000\000\000\000\011\000\011\000\031\000\022\000\031\000\
\011\000\011\000\011\000\000\000\000\000\000\000\011\000\031\000\
\031\000\000\000\023\000\011\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\031\000\023\000\023\000\000\000\023\000\
\000\000\021\000\000\000\023\000\023\000\000\000\031\000\000\000\
\023\000\023\000\023\000\000\000\000\000\000\000\023\000\000\000\
\000\000\033\000\000\000\023\000\000\000\000\000\000\000\000\000\
\000\000\013\000\000\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\000\000\013\000\013\000\000\000\013\000\000\000\
\000\000\000\000\013\000\013\000\059\000\000\000\000\000\013\000\
\013\000\013\000\015\000\024\000\015\000\013\000\000\000\000\000\
\000\000\000\000\013\000\000\000\015\000\015\000\000\000\015\000\
\000\000\000\000\000\000\015\000\015\000\016\000\037\000\016\000\
\015\000\015\000\015\000\000\000\029\000\000\000\015\000\016\000\
\016\000\000\000\016\000\015\000\000\000\000\000\016\000\016\000\
\000\000\000\000\000\000\016\000\016\000\016\000\017\000\032\000\
\017\000\016\000\000\000\000\000\000\000\000\000\016\000\000\000\
\017\000\017\000\000\000\017\000\000\000\000\000\000\000\017\000\
\017\000\018\000\000\000\018\000\017\000\017\000\017\000\000\000\
\000\000\000\000\017\000\018\000\018\000\000\000\018\000\017\000\
\000\000\000\000\018\000\018\000\000\000\000\000\000\000\018\000\
\018\000\018\000\020\000\000\000\020\000\018\000\000\000\000\000\
\000\000\000\000\018\000\000\000\020\000\020\000\000\000\020\000\
\000\000\000\000\000\000\020\000\020\000\019\000\000\000\019\000\
\020\000\020\000\020\000\000\000\000\000\000\000\020\000\019\000\
\019\000\000\000\019\000\020\000\000\000\000\000\019\000\019\000\
\058\000\000\000\058\000\019\000\019\000\019\000\000\000\000\000\
\000\000\019\000\058\000\058\000\000\000\058\000\019\000\000\000\
\000\000\058\000\058\000\028\000\000\000\028\000\058\000\058\000\
\058\000\000\000\000\000\000\000\058\000\028\000\028\000\000\000\
\028\000\058\000\000\000\000\000\028\000\028\000\000\000\000\000\
\000\000\028\000\028\000\028\000\027\000\000\000\027\000\028\000\
\000\000\000\000\000\000\000\000\028\000\000\000\027\000\027\000\
\000\000\027\000\000\000\000\000\000\000\027\000\027\000\022\000\
\000\000\022\000\027\000\027\000\027\000\000\000\000\000\000\000\
\027\000\022\000\022\000\000\000\022\000\027\000\000\000\000\000\
\000\000\022\000\000\000\000\000\000\000\022\000\022\000\022\000\
\000\000\000\000\021\000\022\000\021\000\000\000\000\000\000\000\
\022\000\000\000\000\000\000\000\021\000\021\000\000\000\021\000\
\000\000\000\000\033\000\000\000\033\000\000\000\000\000\000\000\
\021\000\021\000\021\000\000\000\033\000\033\000\021\000\033\000\
\000\000\000\000\000\000\021\000\000\000\000\000\000\000\000\000\
\033\000\033\000\033\000\000\000\000\000\059\000\000\000\059\000\
\000\000\000\000\000\000\033\000\024\000\000\000\024\000\059\000\
\059\000\000\000\059\000\000\000\000\000\000\000\024\000\024\000\
\000\000\024\000\000\000\059\000\059\000\059\000\000\000\037\000\
\000\000\037\000\024\000\024\000\024\000\029\000\059\000\029\000\
\000\000\037\000\037\000\000\000\037\000\024\000\000\000\029\000\
\029\000\000\000\000\000\000\000\000\000\037\000\037\000\037\000\
\032\000\000\000\032\000\029\000\029\000\029\000\000\000\000\000\
\037\000\000\000\032\000\032\000\000\000\000\000\029\000\000\000\
\054\000\055\000\056\000\057\000\058\000\000\000\032\000\032\000\
\032\000\060\000\061\000\062\000\063\000\064\000\065\000\000\000\
\000\000\032\000\000\000\066\000\000\000\000\000\000\000\067\000\
\068\000\000\000\000\000\000\000\000\000\069\000\070\000\000\000\
\000\000\000\000\071\000\000\000\000\000\000\000\000\000\088\000\
\000\000\072\000\054\000\055\000\056\000\057\000\058\000\000\000\
\115\000\000\000\000\000\060\000\061\000\062\000\063\000\064\000\
\065\000\000\000\000\000\000\000\000\000\066\000\000\000\000\000\
\000\000\067\000\068\000\000\000\000\000\000\000\000\000\069\000\
\070\000\000\000\000\000\000\000\071\000\054\000\055\000\056\000\
\057\000\058\000\000\000\072\000\000\000\000\000\060\000\061\000\
\062\000\063\000\064\000\065\000\000\000\000\000\117\000\000\000\
\066\000\000\000\000\000\000\000\067\000\068\000\000\000\000\000\
\000\000\000\000\069\000\070\000\000\000\000\000\000\000\071\000\
\054\000\055\000\056\000\057\000\058\000\000\000\072\000\000\000\
\000\000\060\000\061\000\062\000\063\000\064\000\065\000\000\000\
\000\000\000\000\000\000\066\000\000\000\000\000\000\000\067\000\
\068\000\000\000\000\000\000\000\119\000\069\000\070\000\000\000\
\000\000\000\000\071\000\054\000\055\000\056\000\057\000\058\000\
\000\000\072\000\000\000\000\000\060\000\061\000\062\000\063\000\
\064\000\065\000\000\000\000\000\000\000\000\000\066\000\000\000\
\000\000\000\000\067\000\068\000\000\000\000\000\000\000\000\000\
\069\000\070\000\000\000\000\000\000\000\071\000\054\000\055\000\
\056\000\057\000\058\000\000\000\072\000\000\000\000\000\060\000\
\061\000\062\000\063\000\064\000\065\000\000\000\000\000\000\000\
\000\000\066\000\000\000\000\000\000\000\067\000\068\000\000\000\
\054\000\055\000\056\000\057\000\058\000\000\000\000\000\000\000\
\071\000\060\000\061\000\062\000\063\000\064\000\065\000\072\000\
\054\000\055\000\056\000\057\000\058\000\000\000\000\000\067\000\
\068\000\060\000\061\000\062\000\063\000\064\000\065\000\000\000\
\000\000\000\000\071\000\000\000\000\000\000\000\000\000\067\000\
\068\000\072\000\054\000\055\000\056\000\057\000\058\000\000\000\
\000\000\000\000\000\000\060\000\061\000\062\000\063\000\064\000\
\065\000\072\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\067\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\072\000"

let yycheck = "\009\001\
\000\000\005\000\006\000\007\000\008\000\014\000\009\000\002\001\
\012\000\001\000\044\001\002\001\008\001\008\001\018\000\019\000\
\020\000\008\001\255\255\255\255\255\255\030\000\017\001\255\255\
\255\255\028\000\255\255\255\255\037\000\003\001\004\001\005\001\
\006\001\036\000\044\001\255\255\031\001\041\000\255\255\004\001\
\002\001\006\001\038\001\038\001\000\000\255\255\008\001\038\001\
\255\255\044\001\054\000\055\000\056\000\057\000\058\000\017\001\
\060\000\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\255\255\044\001\255\255\
\076\000\077\000\083\000\078\000\038\001\255\255\082\000\044\001\
\084\000\255\255\044\001\002\001\088\000\255\255\255\255\255\255\
\000\000\008\001\003\001\004\001\005\001\006\001\007\001\255\255\
\255\255\255\255\017\001\255\255\001\001\002\001\255\255\255\255\
\005\001\002\001\255\255\008\001\112\000\010\001\255\255\008\001\
\255\255\117\000\255\255\119\000\255\255\018\001\255\255\038\001\
\021\001\255\255\255\255\024\001\025\001\044\001\023\001\028\001\
\029\001\030\001\255\255\044\001\000\000\034\001\035\001\036\001\
\255\255\255\255\039\001\040\001\041\001\038\001\043\001\003\001\
\004\001\005\001\006\001\007\001\255\255\009\001\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\255\255\
\255\255\255\255\022\001\255\255\255\255\255\255\026\001\027\001\
\255\255\255\255\255\255\255\255\032\001\033\001\255\255\255\255\
\000\000\037\001\003\001\004\001\005\001\006\001\007\001\255\255\
\044\001\255\255\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\255\255\255\255\255\255\022\001\255\255\255\255\
\255\255\026\001\027\001\255\255\255\255\255\255\255\255\032\001\
\033\001\255\255\255\255\255\255\037\001\003\001\004\001\005\001\
\006\001\007\001\255\255\044\001\000\000\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\255\255\255\255\
\022\001\255\255\255\255\255\255\026\001\027\001\255\255\255\255\
\255\255\255\255\032\001\033\001\255\255\255\255\255\255\037\001\
\255\255\255\255\255\255\255\255\255\255\255\255\044\001\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\000\000\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\255\255\022\001\255\255\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\031\001\
\032\001\033\001\034\001\255\255\036\001\037\001\255\255\255\255\
\255\255\255\255\042\001\255\255\044\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\000\000\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\020\001\255\255\022\001\255\255\024\001\025\001\026\001\027\001\
\255\255\255\255\255\255\031\001\032\001\033\001\034\001\255\255\
\036\001\037\001\255\255\255\255\255\255\255\255\042\001\255\255\
\044\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\000\000\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\255\255\022\001\255\255\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\031\001\
\032\001\033\001\034\001\255\255\036\001\037\001\255\255\255\255\
\255\255\255\255\042\001\255\255\044\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\000\000\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\020\001\255\255\022\001\255\255\024\001\025\001\026\001\027\001\
\255\255\255\255\255\255\031\001\032\001\033\001\034\001\255\255\
\036\001\037\001\255\255\255\255\255\255\255\255\042\001\255\255\
\044\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\000\000\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\255\255\022\001\255\255\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\031\001\
\032\001\033\001\034\001\255\255\036\001\037\001\255\255\255\255\
\255\255\255\255\042\001\255\255\044\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\000\000\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\020\001\255\255\022\001\255\255\024\001\025\001\026\001\027\001\
\255\255\255\255\255\255\031\001\032\001\033\001\034\001\013\000\
\036\001\037\001\016\000\017\000\255\255\255\255\042\001\021\000\
\044\001\255\255\024\000\001\001\026\000\003\001\004\001\005\001\
\006\001\007\001\000\000\009\001\255\255\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\045\000\
\022\001\255\255\024\001\025\001\026\001\027\001\255\255\255\255\
\255\255\031\001\032\001\033\001\034\001\255\255\036\001\037\001\
\255\255\255\255\255\255\255\255\042\001\255\255\044\001\255\255\
\255\255\003\001\004\001\005\001\006\001\007\001\000\000\009\001\
\255\255\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\019\001\020\001\255\255\022\001\255\255\255\255\255\255\
\026\001\027\001\255\255\255\255\255\255\031\001\032\001\033\001\
\255\255\255\255\255\255\037\001\255\255\255\255\255\255\255\255\
\042\001\255\255\044\001\255\255\255\255\003\001\004\001\000\000\
\006\001\007\001\255\255\009\001\255\255\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\255\255\
\022\001\255\255\255\255\255\255\026\001\027\001\255\255\001\001\
\002\001\031\001\032\001\033\001\255\255\255\255\008\001\037\001\
\255\255\255\255\255\255\000\000\042\001\255\255\044\001\255\255\
\255\255\003\001\004\001\005\001\006\001\007\001\024\001\025\001\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\034\001\255\255\036\001\255\255\022\001\255\255\255\255\255\255\
\026\001\027\001\255\255\255\255\255\255\255\255\032\001\033\001\
\255\255\000\000\255\255\037\001\255\255\255\255\255\255\255\255\
\255\255\255\255\044\001\255\255\255\255\003\001\004\001\005\001\
\006\001\007\001\255\255\009\001\000\000\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\255\255\
\022\001\000\000\255\255\255\255\026\001\027\001\255\255\255\255\
\255\255\031\001\032\001\033\001\255\255\255\255\255\255\037\001\
\255\255\255\255\255\255\255\255\042\001\255\255\255\255\255\255\
\255\255\003\001\004\001\005\001\006\001\007\001\255\255\009\001\
\255\255\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\000\000\019\001\020\001\255\255\022\001\255\255\255\255\255\255\
\026\001\027\001\255\255\255\255\255\255\031\001\032\001\033\001\
\255\255\255\255\255\255\037\001\255\255\255\255\255\255\255\255\
\042\001\000\000\255\255\255\255\255\255\003\001\004\001\005\001\
\006\001\007\001\255\255\009\001\255\255\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\000\000\019\001\020\001\255\255\
\022\001\255\255\255\255\255\255\026\001\027\001\255\255\255\255\
\255\255\031\001\032\001\033\001\255\255\255\255\255\255\037\001\
\255\255\255\255\255\255\255\255\042\001\000\000\255\255\255\255\
\255\255\003\001\004\001\005\001\006\001\007\001\255\255\009\001\
\255\255\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\000\000\019\001\020\001\255\255\022\001\255\255\255\255\255\255\
\026\001\027\001\255\255\255\255\255\255\031\001\032\001\033\001\
\255\255\255\255\255\255\037\001\255\255\255\255\255\255\255\255\
\042\001\000\000\003\001\004\001\005\001\006\001\007\001\255\255\
\009\001\255\255\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\019\001\020\001\000\000\022\001\255\255\255\255\
\255\255\026\001\027\001\255\255\255\255\255\255\031\001\032\001\
\033\001\255\255\255\255\255\255\037\001\255\255\003\001\000\000\
\005\001\042\001\007\001\255\255\009\001\255\255\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\019\001\020\001\
\255\255\022\001\000\000\255\255\255\255\026\001\027\001\255\255\
\255\255\255\255\031\001\032\001\033\001\255\255\255\255\255\255\
\037\001\255\255\255\255\255\255\003\001\042\001\005\001\255\255\
\007\001\255\255\009\001\000\000\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\019\001\020\001\255\255\022\001\
\255\255\255\255\255\255\026\001\027\001\009\001\000\000\011\001\
\031\001\032\001\033\001\255\255\255\255\255\255\037\001\019\001\
\020\001\255\255\009\001\042\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\031\001\019\001\020\001\255\255\022\001\
\255\255\000\000\255\255\026\001\027\001\255\255\042\001\255\255\
\031\001\032\001\033\001\255\255\255\255\255\255\037\001\255\255\
\255\255\000\000\255\255\042\001\255\255\255\255\255\255\255\255\
\255\255\009\001\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\255\255\022\001\255\255\
\255\255\255\255\026\001\027\001\000\000\255\255\255\255\031\001\
\032\001\033\001\009\001\000\000\011\001\037\001\255\255\255\255\
\255\255\255\255\042\001\255\255\019\001\020\001\255\255\022\001\
\255\255\255\255\255\255\026\001\027\001\009\001\000\000\011\001\
\031\001\032\001\033\001\255\255\000\000\255\255\037\001\019\001\
\020\001\255\255\022\001\042\001\255\255\255\255\026\001\027\001\
\255\255\255\255\255\255\031\001\032\001\033\001\009\001\000\000\
\011\001\037\001\255\255\255\255\255\255\255\255\042\001\255\255\
\019\001\020\001\255\255\022\001\255\255\255\255\255\255\026\001\
\027\001\009\001\255\255\011\001\031\001\032\001\033\001\255\255\
\255\255\255\255\037\001\019\001\020\001\255\255\022\001\042\001\
\255\255\255\255\026\001\027\001\255\255\255\255\255\255\031\001\
\032\001\033\001\009\001\255\255\011\001\037\001\255\255\255\255\
\255\255\255\255\042\001\255\255\019\001\020\001\255\255\022\001\
\255\255\255\255\255\255\026\001\027\001\009\001\255\255\011\001\
\031\001\032\001\033\001\255\255\255\255\255\255\037\001\019\001\
\020\001\255\255\022\001\042\001\255\255\255\255\026\001\027\001\
\009\001\255\255\011\001\031\001\032\001\033\001\255\255\255\255\
\255\255\037\001\019\001\020\001\255\255\022\001\042\001\255\255\
\255\255\026\001\027\001\009\001\255\255\011\001\031\001\032\001\
\033\001\255\255\255\255\255\255\037\001\019\001\020\001\255\255\
\022\001\042\001\255\255\255\255\026\001\027\001\255\255\255\255\
\255\255\031\001\032\001\033\001\009\001\255\255\011\001\037\001\
\255\255\255\255\255\255\255\255\042\001\255\255\019\001\020\001\
\255\255\022\001\255\255\255\255\255\255\026\001\027\001\009\001\
\255\255\011\001\031\001\032\001\033\001\255\255\255\255\255\255\
\037\001\019\001\020\001\255\255\022\001\042\001\255\255\255\255\
\255\255\027\001\255\255\255\255\255\255\031\001\032\001\033\001\
\255\255\255\255\009\001\037\001\011\001\255\255\255\255\255\255\
\042\001\255\255\255\255\255\255\019\001\020\001\255\255\022\001\
\255\255\255\255\009\001\255\255\011\001\255\255\255\255\255\255\
\031\001\032\001\033\001\255\255\019\001\020\001\037\001\022\001\
\255\255\255\255\255\255\042\001\255\255\255\255\255\255\255\255\
\031\001\032\001\033\001\255\255\255\255\009\001\255\255\011\001\
\255\255\255\255\255\255\042\001\009\001\255\255\011\001\019\001\
\020\001\255\255\022\001\255\255\255\255\255\255\019\001\020\001\
\255\255\022\001\255\255\031\001\032\001\033\001\255\255\009\001\
\255\255\011\001\031\001\032\001\033\001\009\001\042\001\011\001\
\255\255\019\001\020\001\255\255\022\001\042\001\255\255\019\001\
\020\001\255\255\255\255\255\255\255\255\031\001\032\001\033\001\
\009\001\255\255\011\001\031\001\032\001\033\001\255\255\255\255\
\042\001\255\255\019\001\020\001\255\255\255\255\042\001\255\255\
\003\001\004\001\005\001\006\001\007\001\255\255\031\001\032\001\
\033\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\042\001\255\255\022\001\255\255\255\255\255\255\026\001\
\027\001\255\255\255\255\255\255\255\255\032\001\033\001\255\255\
\255\255\255\255\037\001\255\255\255\255\255\255\255\255\042\001\
\255\255\044\001\003\001\004\001\005\001\006\001\007\001\255\255\
\009\001\255\255\255\255\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\255\255\255\255\255\255\022\001\255\255\255\255\
\255\255\026\001\027\001\255\255\255\255\255\255\255\255\032\001\
\033\001\255\255\255\255\255\255\037\001\003\001\004\001\005\001\
\006\001\007\001\255\255\044\001\255\255\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\255\255\020\001\255\255\
\022\001\255\255\255\255\255\255\026\001\027\001\255\255\255\255\
\255\255\255\255\032\001\033\001\255\255\255\255\255\255\037\001\
\003\001\004\001\005\001\006\001\007\001\255\255\044\001\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\255\255\255\255\022\001\255\255\255\255\255\255\026\001\
\027\001\255\255\255\255\255\255\031\001\032\001\033\001\255\255\
\255\255\255\255\037\001\003\001\004\001\005\001\006\001\007\001\
\255\255\044\001\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\255\255\255\255\255\255\022\001\255\255\
\255\255\255\255\026\001\027\001\255\255\255\255\255\255\255\255\
\032\001\033\001\255\255\255\255\255\255\037\001\003\001\004\001\
\005\001\006\001\007\001\255\255\044\001\255\255\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\255\255\
\255\255\022\001\255\255\255\255\255\255\026\001\027\001\255\255\
\003\001\004\001\005\001\006\001\007\001\255\255\255\255\255\255\
\037\001\012\001\013\001\014\001\015\001\016\001\017\001\044\001\
\003\001\004\001\005\001\006\001\007\001\255\255\255\255\026\001\
\027\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\255\255\037\001\255\255\255\255\255\255\255\255\026\001\
\027\001\044\001\003\001\004\001\005\001\006\001\007\001\255\255\
\255\255\255\255\255\255\012\001\013\001\014\001\015\001\016\001\
\017\001\044\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\026\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\044\001"

let yynames_const = "\
  PLUS\000\
  TIMES\000\
  MINUS\000\
  DIV\000\
  MOD\000\
  LPAREN\000\
  RPAREN\000\
  BEGIN\000\
  END\000\
  EOF\000\
  L\000\
  LE\000\
  G\000\
  GE\000\
  NE\000\
  EQ\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  REC\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  NOT\000\
  PRINT\000\
  FUN\000\
  FLECHE\000\
  SCOLON\000\
  DSCOLON\000\
  UNIT\000\
  REF\000\
  EXCL\000\
  REVAL\000\
  UNDERSCORE\000\
  E\000\
  RAISE\000\
  TRY\000\
  WITH\000\
  INCR\000\
  COMMA\000\
  "

let yynames_block = "\
  INT\000\
  VAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 69 "parser.mly"
                                        ( _1 )
# 670 "parser.ml"
               : Types.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 74 "parser.mly"
                                                       ( Const _1 )
# 677 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "parser.mly"
                                                       ( BConst true)
# 683 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "parser.mly"
                                                       ( BConst false )
# 689 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 77 "parser.mly"
                                                       ( Var (MNom _1) )
# 696 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "parser.mly"
                                                       ( Unit )
# 702 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 79 "parser.mly"
                                                       ( _2 )
# 709 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 80 "parser.mly"
                                                       ( _2 )
# 716 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 81 "parser.mly"
                                                       ( ArithOp (Add,_1,_3) )
# 724 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 82 "parser.mly"
                                                       ( ArithOp (Mul,_1,_3) )
# 732 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 83 "parser.mly"
                                                       ( ArithOp (Min,_1,_3) )
# 740 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 84 "parser.mly"
                                                       ( ArithOp (Div,_1,_3) )
# 748 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 85 "parser.mly"
                                                       ( ArithOp (Mod,_1,_3) )
# 756 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 86 "parser.mly"
                                                       ( ArithOp (Min,Const 0, _2) )
# 763 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 87 "parser.mly"
                                                       ( CompOp (L,_1,_3) )
# 771 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 88 "parser.mly"
                                                       ( CompOp (Le,_1,_3) )
# 779 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 89 "parser.mly"
                                                       ( CompOp (G,_1,_3) )
# 787 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 90 "parser.mly"
                                                       ( CompOp (Ge,_1,_3) )
# 795 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 91 "parser.mly"
                                                       ( CompOp (Eq,_1,_3) )
# 803 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 92 "parser.mly"
                                                       ( CompOp (Ne,_1,_3) )
# 811 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 93 "parser.mly"
                                                       ( BoolOp (Or,_1,_3) )
# 819 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 94 "parser.mly"
                                                       ( BoolOp (And,_1,_3) )
# 827 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 95 "parser.mly"
                                                       ( BoolOp (Not,_2, BConst true) )
# 834 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 96 "parser.mly"
                                                       ( If (_2,_4,_6) )
# 843 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'corps_func) in
    Obj.repr(
# 97 "parser.mly"
                                                       ( Let (_2,false,_3) )
# 851 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'variable) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'corps_func) in
    Obj.repr(
# 98 "parser.mly"
                                                       ( Let (_3,true,_4) )
# 859 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 99 "parser.mly"
                                                       ( Let (_3,true,_5) )
# 867 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 100 "parser.mly"
                                                       ( Let (_2,false,_4) )
# 875 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 101 "parser.mly"
                                                       ( In (_1,_3) )
# 883 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 102 "parser.mly"
                                                       ( _1 )
# 890 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 103 "parser.mly"
                                                       ( Gseq (_1,_3) )
# 898 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 104 "parser.mly"
                                                       ( Seq (_1,_3) )
# 906 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 105 "parser.mly"
                                                       ( RefNew (_1,_3) )
# 914 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 106 "parser.mly"
                                                       ( CoupleExpr (_1,_3) )
# 922 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 107 "parser.mly"
                                                       ( Exn _2 )
# 929 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 108 "parser.mly"
                                                       ( Raise _2 )
# 936 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 109 "parser.mly"
                                                       ( TryWith (_2,_4,_6) )
# 945 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 110 "parser.mly"
                                                       ( ValRef (_2) )
# 952 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 111 "parser.mly"
                                                       ( Ref _2 )
# 959 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 112 "parser.mly"
                                                       ( Incr _2 )
# 966 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 113 "parser.mly"
                                                       ( PrInt (_2) )
# 973 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func) in
    Obj.repr(
# 114 "parser.mly"
                                                       ( _1 )
# 980 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'applic) in
    Obj.repr(
# 115 "parser.mly"
                                                       ( _1 )
# 987 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'variable) in
    Obj.repr(
# 118 "parser.mly"
                                                       ( _2 )
# 994 "parser.ml"
               : 'variable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'variable) in
    Obj.repr(
# 119 "parser.mly"
                                                       ( MCouple (_1,_3) )
# 1002 "parser.ml"
               : 'variable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 120 "parser.mly"
                                                       ( MNom _1 )
# 1009 "parser.ml"
               : 'variable))
; (fun __caml_parser_env ->
    Obj.repr(
# 121 "parser.mly"
                                                       ( MNone )
# 1015 "parser.ml"
               : 'variable))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 125 "parser.mly"
                                                       ( _2 )
# 1022 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 126 "parser.mly"
                                                       ( Var (MNom _1) )
# 1029 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 127 "parser.mly"
                                                       ( Const _1 )
# 1036 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 128 "parser.mly"
                                                       ( BConst true)
# 1042 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 129 "parser.mly"
                                                       ( BConst false )
# 1048 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 130 "parser.mly"
                                                       ( ValRef (_2) )
# 1055 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 131 "parser.mly"
                                                       ( Unit )
# 1061 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'corps_func) in
    Obj.repr(
# 134 "parser.mly"
                                                       ( _2 )
# 1069 "parser.ml"
               : 'func))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'corps_func) in
    Obj.repr(
# 135 "parser.mly"
                                                       ( _2 )
# 1076 "parser.ml"
               : 'func))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'variable) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'corps_func) in
    Obj.repr(
# 139 "parser.mly"
                                                       ( Fun (_1,_2) )
# 1084 "parser.ml"
               : 'corps_func))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 140 "parser.mly"
                                                       ( Fun (_1,_3) )
# 1092 "parser.ml"
               : 'corps_func))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 141 "parser.mly"
                                                       ( Fun (_1,_3) )
# 1100 "parser.ml"
               : 'corps_func))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'applic) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 145 "parser.mly"
                                                       ( App (_1,_2) )
# 1108 "parser.ml"
               : 'applic))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'sexpr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 146 "parser.mly"
                                                       ( App (_1,_2) )
# 1116 "parser.ml"
               : 'applic))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Types.expr)
