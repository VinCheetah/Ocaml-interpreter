type token =
  | INT of (int)
  | VAR of (string)
  | PLUS
  | TIMES
  | MINUS
  | DIV
  | MOD
  | LPAREN
  | RPAREN
  | BEGIN
  | END
  | EOF
  | L
  | LE
  | G
  | GE
  | NE
  | EQ
  | IF
  | THEN
  | ELSE
  | LET
  | IN
  | REC
  | TRUE
  | FALSE
  | AND
  | OR
  | NOT
  | PRINT
  | FUN
  | FLECHE
  | SCOLON
  | DSCOLON
  | UNIT
  | REF
  | EXCL
  | REVAL
  | UNDERSCORE
  | E
  | RAISE
  | TRY
  | WITH
  | INCR
  | COMMA

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* --- pr√©ambule: ici du code Caml --- *)

open Types   (* rappel: dans Types.ml: 
             type expr = Const of int | Add of expr*expr | Mull of expr*expr *)

# 57 "parser.ml"
let yytransl_const = [|
  259 (* PLUS *);
  260 (* TIMES *);
  261 (* MINUS *);
  262 (* DIV *);
  263 (* MOD *);
  264 (* LPAREN *);
  265 (* RPAREN *);
  266 (* BEGIN *);
  267 (* END *);
    0 (* EOF *);
  268 (* L *);
  269 (* LE *);
  270 (* G *);
  271 (* GE *);
  272 (* NE *);
  273 (* EQ *);
  274 (* IF *);
  275 (* THEN *);
  276 (* ELSE *);
  277 (* LET *);
  278 (* IN *);
  279 (* REC *);
  280 (* TRUE *);
  281 (* FALSE *);
  282 (* AND *);
  283 (* OR *);
  284 (* NOT *);
  285 (* PRINT *);
  286 (* FUN *);
  287 (* FLECHE *);
  288 (* SCOLON *);
  289 (* DSCOLON *);
  290 (* UNIT *);
  291 (* REF *);
  292 (* EXCL *);
  293 (* REVAL *);
  294 (* UNDERSCORE *);
  295 (* E *);
  296 (* RAISE *);
  297 (* TRY *);
  298 (* WITH *);
  299 (* INCR *);
  300 (* COMMA *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* VAR *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\008\000\008\000\
\008\000\008\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\006\000\006\000\009\000\009\000\009\000\007\000\007\000\
\004\000\004\000\003\000\003\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\001\000\001\000\001\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\002\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\002\000\006\000\
\004\000\005\000\003\000\003\000\003\000\002\000\002\000\006\000\
\002\000\002\000\002\000\002\000\001\000\001\000\003\000\001\000\
\001\000\001\000\003\000\001\000\001\000\001\000\001\000\002\000\
\001\000\002\000\002\000\002\000\003\000\003\000\002\000\002\000\
\001\000\001\000\002\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\061\000\000\000\000\000\
\037\000\000\000\040\000\042\000\041\000\000\000\050\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\045\000\
\044\000\000\000\046\000\047\000\049\000\000\000\036\000\051\000\
\034\000\000\000\000\000\000\000\000\000\035\000\000\000\000\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\056\000\
\055\000\000\000\000\000\000\000\052\000\000\000\008\000\000\000\
\000\000\057\000\058\000\000\000\000\000\059\000\000\000\048\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\029\000\000\000\000\000\039\000\000\000\000\000\000\000\000\000\
\043\000\000\000\000\000\026\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\022\000\023\000\037\000\084\000\024\000\025\000\026\000\030\000\
\031\000"

let yysindex = "\017\000\
\095\255\000\000\000\000\237\254\095\255\095\255\095\255\095\255\
\068\255\000\000\000\000\095\255\163\255\254\254\000\000\163\255\
\163\255\095\255\095\255\095\255\163\255\000\000\099\001\163\255\
\000\000\163\255\000\000\000\000\000\000\004\255\000\000\232\254\
\136\255\178\255\213\255\254\254\000\255\006\255\007\255\000\000\
\000\000\095\255\000\000\000\000\000\000\163\255\000\000\000\000\
\000\000\000\000\232\254\232\254\054\004\000\000\095\255\095\255\
\095\255\095\255\095\255\000\000\095\255\095\255\095\255\095\255\
\095\255\095\255\095\255\095\255\095\255\095\255\095\255\000\000\
\000\000\095\255\095\255\254\254\000\000\000\000\000\000\095\255\
\000\255\000\000\000\000\095\255\095\255\000\000\096\004\000\000\
\095\255\043\255\232\254\043\255\232\254\025\255\007\255\007\255\
\007\255\007\255\007\255\007\255\022\005\252\004\236\004\252\004\
\000\000\007\255\236\004\000\000\131\004\095\255\236\004\201\004\
\000\000\166\004\095\255\000\000\095\255\236\004\236\004"

let yyrindex = "\000\000\
\000\000\000\000\001\000\045\000\000\000\000\000\000\000\000\000\
\000\000\089\000\133\000\000\000\000\000\000\000\177\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\055\001\000\000\000\000\000\000\000\000\000\000\143\001\
\000\000\000\000\000\000\000\000\000\000\000\000\171\002\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\221\000\187\001\231\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\011\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\101\002\021\002\137\002\063\002\205\002\230\002\249\002\
\018\003\045\003\064\003\091\003\155\003\189\003\196\003\223\003\
\000\000\125\003\228\003\000\000\000\000\000\000\253\003\024\255\
\000\000\000\000\000\000\000\000\000\000\014\004\031\004"

let yygindex = "\000\000\
\000\000\253\255\244\255\200\255\185\000\000\000\000\000\254\255\
\071\000"

let yytablesize = 1602
let yytable = "\027\000\
\002\000\032\000\033\000\034\000\035\000\027\000\038\000\027\000\
\039\000\055\000\056\000\057\000\058\000\059\000\051\000\052\000\
\053\000\001\000\029\000\071\000\074\000\082\000\085\000\081\000\
\110\000\000\000\000\000\055\000\056\000\057\000\058\000\028\000\
\083\000\038\000\075\000\029\000\000\000\028\000\087\000\028\000\
\000\000\029\000\000\000\029\000\005\000\060\000\056\000\076\000\
\058\000\076\000\071\000\090\000\091\000\092\000\093\000\094\000\
\060\000\095\000\096\000\097\000\098\000\099\000\100\000\101\000\
\102\000\103\000\104\000\105\000\071\000\027\000\106\000\107\000\
\000\000\108\000\000\000\000\000\109\000\000\000\000\000\000\000\
\111\000\112\000\000\000\000\000\048\000\114\000\071\000\000\000\
\003\000\000\000\036\000\000\000\000\000\000\000\000\000\003\000\
\004\000\000\000\000\000\005\000\077\000\028\000\006\000\000\000\
\007\000\029\000\116\000\000\000\086\000\000\000\000\000\118\000\
\008\000\119\000\000\000\009\000\000\000\000\000\010\000\011\000\
\000\000\000\000\012\000\013\000\014\000\000\000\000\000\000\000\
\015\000\016\000\017\000\000\000\004\000\018\000\019\000\020\000\
\000\000\021\000\055\000\056\000\057\000\058\000\059\000\000\000\
\078\000\000\000\000\000\061\000\062\000\063\000\064\000\065\000\
\066\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\067\000\068\000\040\000\041\000\000\000\000\000\069\000\
\000\000\000\000\042\000\000\000\070\000\000\000\000\000\000\000\
\006\000\000\000\000\000\071\000\055\000\056\000\057\000\058\000\
\059\000\000\000\043\000\044\000\079\000\061\000\062\000\063\000\
\064\000\065\000\066\000\000\000\045\000\047\000\046\000\000\000\
\049\000\050\000\000\000\067\000\068\000\054\000\000\000\000\000\
\072\000\069\000\073\000\000\000\000\000\000\000\070\000\055\000\
\056\000\057\000\058\000\059\000\033\000\071\000\000\000\000\000\
\061\000\062\000\063\000\064\000\065\000\066\000\088\000\080\000\
\000\000\000\000\000\000\000\000\000\000\000\000\067\000\068\000\
\000\000\000\000\000\000\000\000\069\000\000\000\000\000\000\000\
\000\000\070\000\000\000\000\000\000\000\000\000\000\000\000\000\
\071\000\045\000\045\000\002\000\002\000\002\000\002\000\002\000\
\045\000\002\000\007\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\000\000\002\000\002\000\000\000\002\000\000\000\
\045\000\045\000\002\000\002\000\000\000\000\000\000\000\002\000\
\002\000\002\000\045\000\000\000\045\000\002\000\000\000\000\000\
\000\000\000\000\002\000\000\000\002\000\044\000\044\000\005\000\
\005\000\005\000\005\000\005\000\044\000\005\000\038\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\000\000\005\000\
\005\000\000\000\005\000\000\000\044\000\044\000\005\000\005\000\
\000\000\000\000\000\000\005\000\005\000\005\000\044\000\000\000\
\044\000\005\000\000\000\000\000\000\000\000\000\005\000\000\000\
\005\000\046\000\046\000\003\000\003\000\003\000\003\000\003\000\
\046\000\003\000\060\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\000\000\003\000\003\000\000\000\003\000\000\000\
\046\000\046\000\003\000\003\000\000\000\000\000\000\000\003\000\
\003\000\003\000\046\000\000\000\046\000\003\000\000\000\000\000\
\000\000\000\000\003\000\000\000\003\000\047\000\047\000\004\000\
\004\000\004\000\004\000\004\000\047\000\004\000\014\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\000\000\004\000\
\004\000\000\000\004\000\000\000\047\000\047\000\004\000\004\000\
\000\000\000\000\000\000\004\000\004\000\004\000\047\000\000\000\
\047\000\004\000\000\000\000\000\000\000\000\000\004\000\000\000\
\004\000\049\000\049\000\006\000\006\000\006\000\006\000\006\000\
\049\000\006\000\030\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\000\000\006\000\006\000\000\000\006\000\000\000\
\049\000\049\000\006\000\006\000\000\000\000\000\000\000\006\000\
\006\000\006\000\049\000\000\000\049\000\006\000\000\000\000\000\
\000\000\000\000\006\000\000\000\006\000\048\000\048\000\033\000\
\033\000\033\000\033\000\033\000\048\000\033\000\031\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\000\000\033\000\
\033\000\000\000\033\000\000\000\048\000\048\000\033\000\033\000\
\000\000\000\000\000\000\033\000\033\000\033\000\048\000\000\000\
\048\000\033\000\000\000\000\000\000\000\000\000\033\000\000\000\
\033\000\000\000\000\000\043\000\043\000\007\000\007\000\007\000\
\007\000\007\000\043\000\007\000\010\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\000\000\007\000\007\000\000\000\
\007\000\000\000\043\000\043\000\007\000\007\000\000\000\000\000\
\000\000\007\000\007\000\007\000\043\000\000\000\043\000\007\000\
\000\000\000\000\000\000\000\000\007\000\000\000\007\000\000\000\
\000\000\038\000\038\000\038\000\038\000\038\000\012\000\038\000\
\000\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\000\000\038\000\038\000\000\000\038\000\000\000\000\000\000\000\
\038\000\038\000\000\000\000\000\000\000\038\000\038\000\038\000\
\000\000\000\000\000\000\038\000\000\000\000\000\000\000\000\000\
\038\000\000\000\038\000\000\000\009\000\055\000\056\000\057\000\
\058\000\059\000\000\000\000\000\000\000\000\000\061\000\062\000\
\063\000\064\000\065\000\066\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\067\000\068\000\000\000\000\000\
\000\000\000\000\069\000\000\000\000\000\000\000\000\000\070\000\
\011\000\000\000\000\000\000\000\000\000\000\000\071\000\000\000\
\000\000\014\000\014\000\014\000\014\000\014\000\000\000\014\000\
\000\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\000\000\014\000\014\000\000\000\014\000\000\000\000\000\000\000\
\014\000\014\000\023\000\000\000\000\000\014\000\014\000\014\000\
\000\000\000\000\000\000\014\000\000\000\000\000\000\000\000\000\
\014\000\000\000\000\000\000\000\000\000\030\000\030\000\030\000\
\030\000\030\000\000\000\030\000\000\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\013\000\030\000\030\000\000\000\
\030\000\000\000\000\000\000\000\030\000\030\000\000\000\000\000\
\000\000\030\000\030\000\030\000\000\000\000\000\000\000\030\000\
\000\000\000\000\000\000\000\000\030\000\015\000\000\000\000\000\
\000\000\031\000\031\000\031\000\031\000\031\000\000\000\031\000\
\000\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
\016\000\031\000\031\000\000\000\031\000\000\000\000\000\000\000\
\031\000\031\000\000\000\000\000\000\000\031\000\031\000\031\000\
\000\000\000\000\000\000\031\000\000\000\000\000\000\000\000\000\
\031\000\017\000\000\000\000\000\000\000\000\000\000\000\010\000\
\010\000\010\000\010\000\010\000\000\000\010\000\000\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\000\000\010\000\
\010\000\000\000\010\000\000\000\018\000\000\000\010\000\010\000\
\000\000\000\000\000\000\010\000\010\000\010\000\000\000\000\000\
\000\000\010\000\000\000\000\000\000\000\000\000\010\000\020\000\
\000\000\012\000\012\000\012\000\012\000\012\000\000\000\012\000\
\000\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\000\000\012\000\012\000\000\000\012\000\000\000\000\000\000\000\
\012\000\012\000\019\000\000\000\000\000\012\000\012\000\012\000\
\000\000\000\000\000\000\012\000\000\000\000\000\000\000\009\000\
\012\000\009\000\000\000\009\000\000\000\009\000\000\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\000\000\009\000\
\009\000\000\000\009\000\000\000\053\000\000\000\009\000\009\000\
\000\000\000\000\000\000\009\000\009\000\009\000\000\000\000\000\
\000\000\009\000\000\000\011\000\000\000\011\000\009\000\011\000\
\000\000\011\000\000\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\022\000\011\000\011\000\000\000\011\000\000\000\
\000\000\000\000\011\000\011\000\000\000\000\000\000\000\011\000\
\011\000\011\000\000\000\000\000\000\000\011\000\000\000\000\000\
\000\000\000\000\011\000\023\000\000\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\021\000\023\000\023\000\000\000\
\023\000\000\000\000\000\027\000\023\000\023\000\000\000\000\000\
\000\000\023\000\023\000\023\000\000\000\000\000\000\000\023\000\
\000\000\000\000\000\000\000\000\023\000\013\000\000\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\028\000\013\000\
\013\000\000\000\013\000\054\000\000\000\000\000\013\000\013\000\
\000\000\000\000\000\000\013\000\013\000\013\000\015\000\000\000\
\015\000\013\000\000\000\000\000\000\000\000\000\013\000\000\000\
\015\000\015\000\000\000\015\000\025\000\000\000\000\000\015\000\
\015\000\016\000\000\000\016\000\015\000\015\000\015\000\000\000\
\000\000\000\000\015\000\016\000\016\000\024\000\016\000\015\000\
\000\000\000\000\016\000\016\000\000\000\000\000\000\000\016\000\
\016\000\016\000\017\000\000\000\017\000\016\000\032\000\000\000\
\000\000\000\000\016\000\000\000\017\000\017\000\000\000\017\000\
\000\000\000\000\000\000\017\000\017\000\000\000\000\000\000\000\
\017\000\017\000\017\000\000\000\000\000\018\000\017\000\018\000\
\000\000\000\000\000\000\017\000\000\000\000\000\000\000\018\000\
\018\000\000\000\018\000\000\000\000\000\000\000\018\000\018\000\
\020\000\000\000\020\000\018\000\018\000\018\000\000\000\000\000\
\000\000\018\000\020\000\020\000\000\000\020\000\018\000\000\000\
\000\000\020\000\020\000\000\000\000\000\000\000\020\000\020\000\
\020\000\000\000\000\000\019\000\020\000\019\000\000\000\000\000\
\000\000\020\000\000\000\000\000\000\000\019\000\019\000\000\000\
\019\000\000\000\000\000\000\000\019\000\019\000\000\000\000\000\
\000\000\019\000\019\000\019\000\000\000\000\000\000\000\019\000\
\000\000\000\000\000\000\000\000\019\000\053\000\000\000\053\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\053\000\
\053\000\000\000\053\000\000\000\000\000\000\000\053\000\053\000\
\000\000\000\000\000\000\053\000\053\000\053\000\000\000\000\000\
\000\000\053\000\000\000\022\000\000\000\022\000\053\000\000\000\
\000\000\000\000\000\000\000\000\000\000\022\000\022\000\000\000\
\022\000\000\000\000\000\000\000\000\000\022\000\000\000\000\000\
\000\000\022\000\022\000\022\000\000\000\000\000\000\000\022\000\
\000\000\000\000\000\000\000\000\022\000\021\000\000\000\021\000\
\000\000\000\000\000\000\000\000\027\000\000\000\027\000\021\000\
\021\000\000\000\021\000\000\000\000\000\000\000\027\000\027\000\
\000\000\027\000\000\000\021\000\021\000\021\000\000\000\000\000\
\000\000\021\000\027\000\027\000\027\000\000\000\021\000\028\000\
\000\000\028\000\000\000\000\000\054\000\027\000\054\000\000\000\
\000\000\028\000\028\000\000\000\028\000\000\000\054\000\054\000\
\000\000\054\000\000\000\000\000\000\000\028\000\028\000\028\000\
\000\000\000\000\054\000\054\000\054\000\025\000\000\000\025\000\
\028\000\000\000\000\000\000\000\000\000\054\000\000\000\025\000\
\025\000\000\000\025\000\000\000\000\000\000\000\024\000\000\000\
\024\000\000\000\000\000\025\000\025\000\025\000\000\000\000\000\
\024\000\024\000\000\000\024\000\000\000\000\000\025\000\032\000\
\000\000\032\000\000\000\000\000\024\000\024\000\024\000\000\000\
\000\000\032\000\032\000\000\000\032\000\000\000\000\000\024\000\
\055\000\056\000\057\000\058\000\059\000\032\000\032\000\032\000\
\000\000\061\000\062\000\063\000\064\000\065\000\066\000\000\000\
\032\000\000\000\000\000\000\000\000\000\000\000\000\000\067\000\
\068\000\000\000\000\000\000\000\000\000\069\000\000\000\000\000\
\000\000\000\000\070\000\000\000\000\000\000\000\000\000\089\000\
\000\000\071\000\055\000\056\000\057\000\058\000\059\000\000\000\
\113\000\000\000\000\000\061\000\062\000\063\000\064\000\065\000\
\066\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\067\000\068\000\000\000\000\000\000\000\000\000\069\000\
\000\000\000\000\000\000\000\000\070\000\055\000\056\000\057\000\
\058\000\059\000\000\000\071\000\000\000\000\000\061\000\062\000\
\063\000\064\000\065\000\066\000\000\000\000\000\115\000\000\000\
\000\000\000\000\000\000\000\000\067\000\068\000\000\000\000\000\
\000\000\000\000\069\000\000\000\000\000\000\000\000\000\070\000\
\055\000\056\000\057\000\058\000\059\000\000\000\071\000\000\000\
\000\000\061\000\062\000\063\000\064\000\065\000\066\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\067\000\
\068\000\000\000\000\000\000\000\117\000\069\000\000\000\000\000\
\000\000\000\000\070\000\055\000\056\000\057\000\058\000\059\000\
\000\000\071\000\000\000\000\000\061\000\062\000\063\000\064\000\
\065\000\066\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\067\000\068\000\000\000\000\000\000\000\000\000\
\069\000\000\000\000\000\000\000\000\000\070\000\055\000\056\000\
\057\000\058\000\059\000\000\000\071\000\000\000\000\000\061\000\
\062\000\063\000\064\000\065\000\066\000\000\000\055\000\056\000\
\057\000\058\000\059\000\000\000\000\000\067\000\068\000\061\000\
\062\000\063\000\064\000\065\000\066\000\000\000\000\000\000\000\
\070\000\000\000\000\000\000\000\000\000\067\000\068\000\071\000\
\055\000\056\000\057\000\058\000\059\000\000\000\000\000\000\000\
\000\000\061\000\062\000\063\000\064\000\065\000\066\000\071\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\067\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\071\000"

let yycheck = "\002\001\
\000\000\005\000\006\000\007\000\008\000\002\001\009\000\002\001\
\012\000\003\001\004\001\005\001\006\001\007\001\018\000\019\000\
\020\000\001\000\038\001\044\001\017\001\022\001\017\001\036\000\
\081\000\255\255\255\255\003\001\004\001\005\001\006\001\034\001\
\033\001\036\000\031\001\038\001\255\255\034\001\042\000\034\001\
\255\255\038\001\255\255\038\001\000\000\022\001\004\001\044\001\
\006\001\044\001\044\001\055\000\056\000\057\000\058\000\059\000\
\033\001\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\044\001\002\001\074\000\075\000\
\255\255\076\000\255\255\255\255\080\000\255\255\255\255\255\255\
\084\000\085\000\255\255\255\255\014\000\089\000\044\001\255\255\
\000\000\255\255\023\001\255\255\255\255\255\255\255\255\001\001\
\002\001\255\255\255\255\005\001\030\000\034\001\008\001\255\255\
\010\001\038\001\110\000\255\255\038\000\255\255\255\255\115\000\
\018\001\117\000\255\255\021\001\255\255\255\255\024\001\025\001\
\255\255\255\255\028\001\029\001\030\001\255\255\255\255\255\255\
\034\001\035\001\036\001\255\255\000\000\039\001\040\001\041\001\
\255\255\043\001\003\001\004\001\005\001\006\001\007\001\255\255\
\009\001\255\255\255\255\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\026\001\027\001\001\001\002\001\255\255\255\255\032\001\
\255\255\255\255\008\001\255\255\037\001\255\255\255\255\255\255\
\000\000\255\255\255\255\044\001\003\001\004\001\005\001\006\001\
\007\001\255\255\024\001\025\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\034\001\013\000\036\001\255\255\
\016\000\017\000\255\255\026\001\027\001\021\000\255\255\255\255\
\024\000\032\001\026\000\255\255\255\255\255\255\037\001\003\001\
\004\001\005\001\006\001\007\001\000\000\044\001\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\046\000\019\001\
\255\255\255\255\255\255\255\255\255\255\255\255\026\001\027\001\
\255\255\255\255\255\255\255\255\032\001\255\255\255\255\255\255\
\255\255\037\001\255\255\255\255\255\255\255\255\255\255\255\255\
\044\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\000\000\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\255\255\022\001\255\255\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\031\001\
\032\001\033\001\034\001\255\255\036\001\037\001\255\255\255\255\
\255\255\255\255\042\001\255\255\044\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\000\000\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\020\001\255\255\022\001\255\255\024\001\025\001\026\001\027\001\
\255\255\255\255\255\255\031\001\032\001\033\001\034\001\255\255\
\036\001\037\001\255\255\255\255\255\255\255\255\042\001\255\255\
\044\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\000\000\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\255\255\022\001\255\255\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\031\001\
\032\001\033\001\034\001\255\255\036\001\037\001\255\255\255\255\
\255\255\255\255\042\001\255\255\044\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\000\000\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\020\001\255\255\022\001\255\255\024\001\025\001\026\001\027\001\
\255\255\255\255\255\255\031\001\032\001\033\001\034\001\255\255\
\036\001\037\001\255\255\255\255\255\255\255\255\042\001\255\255\
\044\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\000\000\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\255\255\022\001\255\255\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\031\001\
\032\001\033\001\034\001\255\255\036\001\037\001\255\255\255\255\
\255\255\255\255\042\001\255\255\044\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\000\000\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\020\001\255\255\022\001\255\255\024\001\025\001\026\001\027\001\
\255\255\255\255\255\255\031\001\032\001\033\001\034\001\255\255\
\036\001\037\001\255\255\255\255\255\255\255\255\042\001\255\255\
\044\001\255\255\255\255\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\000\000\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\255\255\
\022\001\255\255\024\001\025\001\026\001\027\001\255\255\255\255\
\255\255\031\001\032\001\033\001\034\001\255\255\036\001\037\001\
\255\255\255\255\255\255\255\255\042\001\255\255\044\001\255\255\
\255\255\003\001\004\001\005\001\006\001\007\001\000\000\009\001\
\255\255\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\019\001\020\001\255\255\022\001\255\255\255\255\255\255\
\026\001\027\001\255\255\255\255\255\255\031\001\032\001\033\001\
\255\255\255\255\255\255\037\001\255\255\255\255\255\255\255\255\
\042\001\255\255\044\001\255\255\000\000\003\001\004\001\005\001\
\006\001\007\001\255\255\255\255\255\255\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\026\001\027\001\255\255\255\255\
\255\255\255\255\032\001\255\255\255\255\255\255\255\255\037\001\
\000\000\255\255\255\255\255\255\255\255\255\255\044\001\255\255\
\255\255\003\001\004\001\005\001\006\001\007\001\255\255\009\001\
\255\255\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\019\001\020\001\255\255\022\001\255\255\255\255\255\255\
\026\001\027\001\000\000\255\255\255\255\031\001\032\001\033\001\
\255\255\255\255\255\255\037\001\255\255\255\255\255\255\255\255\
\042\001\255\255\255\255\255\255\255\255\003\001\004\001\005\001\
\006\001\007\001\255\255\009\001\255\255\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\000\000\019\001\020\001\255\255\
\022\001\255\255\255\255\255\255\026\001\027\001\255\255\255\255\
\255\255\031\001\032\001\033\001\255\255\255\255\255\255\037\001\
\255\255\255\255\255\255\255\255\042\001\000\000\255\255\255\255\
\255\255\003\001\004\001\005\001\006\001\007\001\255\255\009\001\
\255\255\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\000\000\019\001\020\001\255\255\022\001\255\255\255\255\255\255\
\026\001\027\001\255\255\255\255\255\255\031\001\032\001\033\001\
\255\255\255\255\255\255\037\001\255\255\255\255\255\255\255\255\
\042\001\000\000\255\255\255\255\255\255\255\255\255\255\003\001\
\004\001\005\001\006\001\007\001\255\255\009\001\255\255\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\020\001\255\255\022\001\255\255\000\000\255\255\026\001\027\001\
\255\255\255\255\255\255\031\001\032\001\033\001\255\255\255\255\
\255\255\037\001\255\255\255\255\255\255\255\255\042\001\000\000\
\255\255\003\001\004\001\005\001\006\001\007\001\255\255\009\001\
\255\255\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\019\001\020\001\255\255\022\001\255\255\255\255\255\255\
\026\001\027\001\000\000\255\255\255\255\031\001\032\001\033\001\
\255\255\255\255\255\255\037\001\255\255\255\255\255\255\003\001\
\042\001\005\001\255\255\007\001\255\255\009\001\255\255\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\020\001\255\255\022\001\255\255\000\000\255\255\026\001\027\001\
\255\255\255\255\255\255\031\001\032\001\033\001\255\255\255\255\
\255\255\037\001\255\255\003\001\255\255\005\001\042\001\007\001\
\255\255\009\001\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\000\000\019\001\020\001\255\255\022\001\255\255\
\255\255\255\255\026\001\027\001\255\255\255\255\255\255\031\001\
\032\001\033\001\255\255\255\255\255\255\037\001\255\255\255\255\
\255\255\255\255\042\001\009\001\255\255\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\000\000\019\001\020\001\255\255\
\022\001\255\255\255\255\000\000\026\001\027\001\255\255\255\255\
\255\255\031\001\032\001\033\001\255\255\255\255\255\255\037\001\
\255\255\255\255\255\255\255\255\042\001\009\001\255\255\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\000\000\019\001\
\020\001\255\255\022\001\000\000\255\255\255\255\026\001\027\001\
\255\255\255\255\255\255\031\001\032\001\033\001\009\001\255\255\
\011\001\037\001\255\255\255\255\255\255\255\255\042\001\255\255\
\019\001\020\001\255\255\022\001\000\000\255\255\255\255\026\001\
\027\001\009\001\255\255\011\001\031\001\032\001\033\001\255\255\
\255\255\255\255\037\001\019\001\020\001\000\000\022\001\042\001\
\255\255\255\255\026\001\027\001\255\255\255\255\255\255\031\001\
\032\001\033\001\009\001\255\255\011\001\037\001\000\000\255\255\
\255\255\255\255\042\001\255\255\019\001\020\001\255\255\022\001\
\255\255\255\255\255\255\026\001\027\001\255\255\255\255\255\255\
\031\001\032\001\033\001\255\255\255\255\009\001\037\001\011\001\
\255\255\255\255\255\255\042\001\255\255\255\255\255\255\019\001\
\020\001\255\255\022\001\255\255\255\255\255\255\026\001\027\001\
\009\001\255\255\011\001\031\001\032\001\033\001\255\255\255\255\
\255\255\037\001\019\001\020\001\255\255\022\001\042\001\255\255\
\255\255\026\001\027\001\255\255\255\255\255\255\031\001\032\001\
\033\001\255\255\255\255\009\001\037\001\011\001\255\255\255\255\
\255\255\042\001\255\255\255\255\255\255\019\001\020\001\255\255\
\022\001\255\255\255\255\255\255\026\001\027\001\255\255\255\255\
\255\255\031\001\032\001\033\001\255\255\255\255\255\255\037\001\
\255\255\255\255\255\255\255\255\042\001\009\001\255\255\011\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\019\001\
\020\001\255\255\022\001\255\255\255\255\255\255\026\001\027\001\
\255\255\255\255\255\255\031\001\032\001\033\001\255\255\255\255\
\255\255\037\001\255\255\009\001\255\255\011\001\042\001\255\255\
\255\255\255\255\255\255\255\255\255\255\019\001\020\001\255\255\
\022\001\255\255\255\255\255\255\255\255\027\001\255\255\255\255\
\255\255\031\001\032\001\033\001\255\255\255\255\255\255\037\001\
\255\255\255\255\255\255\255\255\042\001\009\001\255\255\011\001\
\255\255\255\255\255\255\255\255\009\001\255\255\011\001\019\001\
\020\001\255\255\022\001\255\255\255\255\255\255\019\001\020\001\
\255\255\022\001\255\255\031\001\032\001\033\001\255\255\255\255\
\255\255\037\001\031\001\032\001\033\001\255\255\042\001\009\001\
\255\255\011\001\255\255\255\255\009\001\042\001\011\001\255\255\
\255\255\019\001\020\001\255\255\022\001\255\255\019\001\020\001\
\255\255\022\001\255\255\255\255\255\255\031\001\032\001\033\001\
\255\255\255\255\031\001\032\001\033\001\009\001\255\255\011\001\
\042\001\255\255\255\255\255\255\255\255\042\001\255\255\019\001\
\020\001\255\255\022\001\255\255\255\255\255\255\009\001\255\255\
\011\001\255\255\255\255\031\001\032\001\033\001\255\255\255\255\
\019\001\020\001\255\255\022\001\255\255\255\255\042\001\009\001\
\255\255\011\001\255\255\255\255\031\001\032\001\033\001\255\255\
\255\255\019\001\020\001\255\255\022\001\255\255\255\255\042\001\
\003\001\004\001\005\001\006\001\007\001\031\001\032\001\033\001\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\042\001\255\255\255\255\255\255\255\255\255\255\255\255\026\001\
\027\001\255\255\255\255\255\255\255\255\032\001\255\255\255\255\
\255\255\255\255\037\001\255\255\255\255\255\255\255\255\042\001\
\255\255\044\001\003\001\004\001\005\001\006\001\007\001\255\255\
\009\001\255\255\255\255\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\026\001\027\001\255\255\255\255\255\255\255\255\032\001\
\255\255\255\255\255\255\255\255\037\001\003\001\004\001\005\001\
\006\001\007\001\255\255\044\001\255\255\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\255\255\020\001\255\255\
\255\255\255\255\255\255\255\255\026\001\027\001\255\255\255\255\
\255\255\255\255\032\001\255\255\255\255\255\255\255\255\037\001\
\003\001\004\001\005\001\006\001\007\001\255\255\044\001\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\026\001\
\027\001\255\255\255\255\255\255\031\001\032\001\255\255\255\255\
\255\255\255\255\037\001\003\001\004\001\005\001\006\001\007\001\
\255\255\044\001\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\026\001\027\001\255\255\255\255\255\255\255\255\
\032\001\255\255\255\255\255\255\255\255\037\001\003\001\004\001\
\005\001\006\001\007\001\255\255\044\001\255\255\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\003\001\004\001\
\005\001\006\001\007\001\255\255\255\255\026\001\027\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\255\255\
\037\001\255\255\255\255\255\255\255\255\026\001\027\001\044\001\
\003\001\004\001\005\001\006\001\007\001\255\255\255\255\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\044\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\026\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\044\001"

let yynames_const = "\
  PLUS\000\
  TIMES\000\
  MINUS\000\
  DIV\000\
  MOD\000\
  LPAREN\000\
  RPAREN\000\
  BEGIN\000\
  END\000\
  EOF\000\
  L\000\
  LE\000\
  G\000\
  GE\000\
  NE\000\
  EQ\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  REC\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  NOT\000\
  PRINT\000\
  FUN\000\
  FLECHE\000\
  SCOLON\000\
  DSCOLON\000\
  UNIT\000\
  REF\000\
  EXCL\000\
  REVAL\000\
  UNDERSCORE\000\
  E\000\
  RAISE\000\
  TRY\000\
  WITH\000\
  INCR\000\
  COMMA\000\
  "

let yynames_block = "\
  INT\000\
  VAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 72 "parser.mly"
                                        ( _1 )
# 653 "parser.ml"
               : Types.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 77 "parser.mly"
                                                       ( Const _1 )
# 660 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "parser.mly"
                                                       ( BConst true)
# 666 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 79 "parser.mly"
                                                       ( BConst false )
# 672 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 80 "parser.mly"
                                                       ( Var (MNom _1) )
# 679 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "parser.mly"
                                                       ( Unit )
# 685 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 82 "parser.mly"
                                                       ( _2 )
# 692 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 83 "parser.mly"
                                                       ( _2 )
# 699 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 84 "parser.mly"
                                                       ( ArithOp (Add,_1,_3) )
# 707 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 85 "parser.mly"
                                                       ( ArithOp (Mul,_1,_3) )
# 715 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 86 "parser.mly"
                                                       ( ArithOp (Min,_1,_3) )
# 723 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 87 "parser.mly"
                                                       ( ArithOp (Div,_1,_3) )
# 731 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 88 "parser.mly"
                                                       ( ArithOp (Mod,_1,_3) )
# 739 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 89 "parser.mly"
                                                       ( ArithOp (Min,Const 0, _2) )
# 746 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 90 "parser.mly"
                                                       ( CompOp (L,_1,_3) )
# 754 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 91 "parser.mly"
                                                       ( CompOp (Le,_1,_3) )
# 762 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 92 "parser.mly"
                                                       ( CompOp (G,_1,_3) )
# 770 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 93 "parser.mly"
                                                       ( CompOp (Ge,_1,_3) )
# 778 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 94 "parser.mly"
                                                       ( CompOp (Eq,_1,_3) )
# 786 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 95 "parser.mly"
                                                       ( CompOp (Ne,_1,_3) )
# 794 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 96 "parser.mly"
                                                       ( BoolOp (Or,_1,_3) )
# 802 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 97 "parser.mly"
                                                       ( BoolOp (And,_1,_3) )
# 810 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 98 "parser.mly"
                                                       ( BoolOp (Not,_2, BConst true) )
# 817 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 99 "parser.mly"
                                                       ( If (_2,_4,_6) )
# 826 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'declaration) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'groupe_decla) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 106 "parser.mly"
                                                       ( Let (false,fst(_2),snd(_2),_3,_4) )
# 835 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'declaration) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'groupe_decla) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 107 "parser.mly"
                                                       ( Let (true,fst(_3),snd(_3),_4,_5) )
# 844 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 109 "parser.mly"
                                                       ( Seq (_1,_3) )
# 852 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 110 "parser.mly"
                                                       ( RefNew (_1,_3) )
# 860 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 111 "parser.mly"
                                                       ( CoupleExpr (_1,_3) )
# 868 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 112 "parser.mly"
                                                       ( Exn _2 )
# 875 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 113 "parser.mly"
                                                       ( Raise _2 )
# 882 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 114 "parser.mly"
                                                       ( TryWith (_2,_4,_6) )
# 891 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 115 "parser.mly"
                                                       ( ValRef (_2) )
# 898 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 116 "parser.mly"
                                                       ( Ref _2 )
# 905 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 117 "parser.mly"
                                                       ( Incr _2 )
# 912 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 118 "parser.mly"
                                                       ( PrInt (_2) )
# 919 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func) in
    Obj.repr(
# 119 "parser.mly"
                                                       ( _1 )
# 926 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'applic) in
    Obj.repr(
# 120 "parser.mly"
                                                       ( _1 )
# 933 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'variable) in
    Obj.repr(
# 124 "parser.mly"
                                                       ( MCouple (_1,_3) )
# 941 "parser.ml"
               : 'variable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 125 "parser.mly"
                                                       ( MNom _1 )
# 948 "parser.ml"
               : 'variable))
; (fun __caml_parser_env ->
    Obj.repr(
# 126 "parser.mly"
                                                       ( MNone )
# 954 "parser.ml"
               : 'variable))
; (fun __caml_parser_env ->
    Obj.repr(
# 127 "parser.mly"
                                                       ( MUnit )
# 960 "parser.ml"
               : 'variable))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 131 "parser.mly"
                                                       ( _2 )
# 967 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 132 "parser.mly"
                                                       ( Var (MNom _1) )
# 974 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 133 "parser.mly"
                                                       ( Const _1 )
# 981 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 134 "parser.mly"
                                                       ( BConst true)
# 987 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 135 "parser.mly"
                                                       ( BConst false )
# 993 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 136 "parser.mly"
                                                       ( ValRef (_2) )
# 1000 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 137 "parser.mly"
                                                       ( Unit )
# 1006 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'corps_func) in
    Obj.repr(
# 140 "parser.mly"
                                                       ( _2 )
# 1014 "parser.ml"
               : 'func))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'corps_func) in
    Obj.repr(
# 141 "parser.mly"
                                                       ( _2 )
# 1021 "parser.ml"
               : 'func))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'variable) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'corps_func) in
    Obj.repr(
# 145 "parser.mly"
                                                       ( Fun (_1,_2) )
# 1029 "parser.ml"
               : 'corps_func))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 146 "parser.mly"
                                                       ( Fun (_1,_3) )
# 1037 "parser.ml"
               : 'corps_func))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 147 "parser.mly"
                                                       ( Fun (_1,_3) )
# 1045 "parser.ml"
               : 'corps_func))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'applic) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 151 "parser.mly"
                                                       ( App (_1,_2) )
# 1053 "parser.ml"
               : 'applic))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'sexpr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 152 "parser.mly"
                                                       ( App (_1,_2) )
# 1061 "parser.ml"
               : 'applic))
; (fun __caml_parser_env ->
    Obj.repr(
# 156 "parser.mly"
            ( false )
# 1067 "parser.ml"
               : 'groupe_decla))
; (fun __caml_parser_env ->
    Obj.repr(
# 157 "parser.mly"
            ( true )
# 1073 "parser.ml"
               : 'groupe_decla))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'variable) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'corps_func) in
    Obj.repr(
# 161 "parser.mly"
                             ( (_1,_2) )
# 1081 "parser.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 162 "parser.mly"
                             ( (_1,_3) )
# 1089 "parser.ml"
               : 'declaration))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Types.expr)
