type token =
  | INT of (int)
  | VAR of (string)
  | PLUS
  | TIMES
  | MINUS
  | DIV
  | MOD
  | LPAREN
  | RPAREN
  | EOF
  | L
  | LE
  | G
  | GE
  | NE
  | EQ
  | IF
  | THEN
  | ELSE
  | LET
  | IN
  | REC
  | TRUE
  | FALSE
  | AND
  | OR
  | NOT
  | PRINT
  | FUN
  | FLECHE
  | SCOLON
  | UNIT
  | REF
  | EXCL
  | REVAL
  | UNDERSCORE

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* --- pr√©ambule: ici du code Caml --- *)

open Types   (* rappel: dans Types.ml: 
             type expr = Const of int | Add of expr*expr | Mull of expr*expr *)

# 48 "parser.ml"
let yytransl_const = [|
  259 (* PLUS *);
  260 (* TIMES *);
  261 (* MINUS *);
  262 (* DIV *);
  263 (* MOD *);
  264 (* LPAREN *);
  265 (* RPAREN *);
    0 (* EOF *);
  266 (* L *);
  267 (* LE *);
  268 (* G *);
  269 (* GE *);
  270 (* NE *);
  271 (* EQ *);
  272 (* IF *);
  273 (* THEN *);
  274 (* ELSE *);
  275 (* LET *);
  276 (* IN *);
  277 (* REC *);
  278 (* TRUE *);
  279 (* FALSE *);
  280 (* AND *);
  281 (* OR *);
  282 (* NOT *);
  283 (* PRINT *);
  284 (* FUN *);
  285 (* FLECHE *);
  286 (* SCOLON *);
  287 (* UNIT *);
  288 (* REF *);
  289 (* EXCL *);
  290 (* REVAL *);
  291 (* UNDERSCORE *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* VAR *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\006\000\006\000\006\000\006\000\006\000\006\000\003\000\003\000\
\003\000\004\000\005\000\005\000\005\000\005\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\001\000\001\000\001\000\001\000\003\000\
\003\000\003\000\003\000\003\000\003\000\002\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\002\000\001\000\
\002\000\004\000\001\000\004\000\003\000\002\000\002\000\003\000\
\001\000\001\000\001\000\001\000\001\000\003\000\002\000\002\000\
\007\000\006\000\007\000\006\000\007\000\006\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\
\003\000\004\000\000\000\000\000\000\000\006\000\000\000\000\000\
\047\000\000\000\000\000\024\000\027\000\033\000\036\000\000\000\
\034\000\035\000\037\000\040\000\014\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\025\000\000\000\000\000\000\000\
\031\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\039\000\000\000\000\000\008\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\010\000\000\000\012\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\038\000\000\000\000\000\000\000\000\000\
\000\000\000\000\026\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\041\000\000\000\000\000"

let yydgoto = "\002\000\
\017\000\018\000\019\000\020\000\021\000\028\000"

let yysindex = "\006\000\
\102\255\000\000\000\000\089\255\102\255\139\255\102\255\000\255\
\000\000\000\000\102\255\007\255\009\255\000\000\102\255\102\255\
\000\000\117\000\089\255\000\000\000\000\000\000\000\000\102\255\
\000\000\000\000\000\000\000\000\000\000\032\255\064\255\178\255\
\030\255\004\255\041\255\145\255\000\000\102\255\028\255\013\255\
\000\000\102\255\102\255\102\255\102\255\102\255\000\000\102\255\
\102\255\102\255\102\255\102\255\102\255\102\255\102\255\102\255\
\102\255\000\000\215\255\029\255\000\000\102\255\102\255\047\255\
\048\255\102\255\144\001\102\255\006\255\000\000\006\255\000\000\
\026\255\145\255\145\255\145\255\145\255\145\255\145\255\160\002\
\013\255\144\002\013\255\000\000\102\255\176\001\208\001\102\255\
\102\255\240\001\000\000\112\002\016\002\102\255\102\255\048\002\
\080\002\102\255\089\255\112\002\112\002\102\255\102\255\112\002\
\000\000\112\002\112\002"

let yyrindex = "\000\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\033\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\143\000\000\000\000\000\000\000\056\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\059\000\000\000\085\000\000\000\
\169\000\187\000\205\000\223\000\241\000\003\001\022\001\041\001\
\116\000\060\001\075\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\080\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\101\001\106\001\000\000\000\000\111\001\
\000\000\116\001\126\001"

let yygindex = "\000\000\
\000\000\254\255\000\000\000\000\000\000\237\255"

let yytablesize = 952
let yytable = "\058\000\
\005\000\033\000\029\000\031\000\032\000\064\000\001\000\037\000\
\036\000\043\000\039\000\045\000\040\000\041\000\038\000\042\000\
\043\000\044\000\045\000\046\000\034\000\059\000\048\000\049\000\
\050\000\051\000\052\000\053\000\042\000\043\000\044\000\045\000\
\007\000\060\000\035\000\067\000\054\000\055\000\065\000\069\000\
\070\000\071\000\072\000\073\000\063\000\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\081\000\082\000\083\000\066\000\
\068\000\085\000\009\000\086\000\087\000\088\000\089\000\090\000\
\000\000\092\000\042\000\043\000\044\000\045\000\046\000\000\000\
\061\000\048\000\049\000\050\000\051\000\052\000\053\000\105\000\
\000\000\000\000\093\000\000\000\011\000\096\000\097\000\054\000\
\055\000\022\000\023\000\100\000\101\000\056\000\000\000\104\000\
\024\000\057\000\000\000\106\000\107\000\000\000\003\000\004\000\
\000\000\000\000\005\000\000\000\000\000\006\000\025\000\026\000\
\000\000\000\000\000\000\021\000\047\000\007\000\000\000\027\000\
\008\000\000\000\000\000\009\000\010\000\000\000\000\000\011\000\
\012\000\013\000\000\000\000\000\014\000\015\000\016\000\000\000\
\000\000\000\000\000\000\003\000\004\000\000\000\023\000\005\000\
\000\000\000\000\006\000\042\000\043\000\044\000\045\000\046\000\
\000\000\000\000\007\000\000\000\000\000\008\000\000\000\000\000\
\009\000\010\000\000\000\000\000\011\000\012\000\030\000\000\000\
\013\000\014\000\015\000\016\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\042\000\043\000\044\000\045\000\
\046\000\000\000\015\000\048\000\049\000\050\000\051\000\052\000\
\053\000\000\000\062\000\000\000\000\000\000\000\000\000\000\000\
\000\000\054\000\055\000\000\000\016\000\000\000\000\000\056\000\
\000\000\000\000\000\000\057\000\000\000\000\000\000\000\000\000\
\000\000\042\000\043\000\044\000\045\000\046\000\017\000\084\000\
\048\000\049\000\050\000\051\000\052\000\053\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\054\000\055\000\
\018\000\000\000\000\000\000\000\056\000\000\000\000\000\000\000\
\057\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\020\000\005\000\005\000\005\000\005\000\005\000\
\000\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\000\000\005\000\005\000\000\000\005\000\019\000\000\000\000\000\
\005\000\005\000\000\000\000\000\000\000\000\000\005\000\000\000\
\000\000\000\000\005\000\007\000\007\000\007\000\007\000\007\000\
\022\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\000\000\007\000\007\000\000\000\007\000\000\000\000\000\030\000\
\007\000\007\000\000\000\029\000\000\000\009\000\007\000\009\000\
\000\000\009\000\007\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\032\000\009\000\009\000\000\000\009\000\028\000\
\000\000\000\000\009\000\009\000\000\000\000\000\000\000\011\000\
\009\000\011\000\000\000\011\000\009\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\042\000\011\000\011\000\000\000\
\011\000\044\000\000\000\000\000\011\000\011\000\046\000\000\000\
\000\000\000\000\011\000\043\000\000\000\000\000\011\000\042\000\
\043\000\044\000\045\000\046\000\021\000\045\000\048\000\049\000\
\050\000\051\000\052\000\053\000\021\000\021\000\000\000\021\000\
\000\000\000\000\000\000\000\000\054\000\055\000\000\000\000\000\
\000\000\021\000\056\000\000\000\000\000\021\000\057\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\000\000\023\000\
\023\000\000\000\023\000\000\000\000\000\000\000\023\000\023\000\
\000\000\000\000\000\000\000\000\023\000\000\000\000\000\000\000\
\023\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\000\000\013\000\013\000\000\000\013\000\000\000\000\000\000\000\
\013\000\013\000\000\000\015\000\000\000\000\000\013\000\000\000\
\000\000\000\000\013\000\015\000\015\000\000\000\015\000\000\000\
\000\000\000\000\015\000\015\000\000\000\016\000\000\000\000\000\
\015\000\000\000\000\000\000\000\015\000\016\000\016\000\000\000\
\016\000\000\000\000\000\000\000\016\000\016\000\000\000\017\000\
\000\000\000\000\016\000\000\000\000\000\000\000\016\000\017\000\
\017\000\000\000\017\000\000\000\000\000\000\000\017\000\017\000\
\000\000\018\000\000\000\000\000\017\000\000\000\000\000\000\000\
\017\000\018\000\018\000\000\000\018\000\000\000\000\000\000\000\
\018\000\018\000\000\000\020\000\000\000\000\000\018\000\000\000\
\000\000\000\000\018\000\020\000\020\000\000\000\020\000\000\000\
\000\000\000\000\020\000\020\000\000\000\000\000\019\000\000\000\
\020\000\000\000\000\000\000\000\020\000\000\000\019\000\019\000\
\000\000\019\000\000\000\000\000\000\000\019\000\019\000\000\000\
\000\000\022\000\000\000\019\000\000\000\000\000\000\000\019\000\
\000\000\022\000\022\000\000\000\022\000\000\000\000\000\000\000\
\030\000\022\000\000\000\000\000\029\000\000\000\022\000\000\000\
\030\000\030\000\022\000\030\000\029\000\029\000\000\000\029\000\
\000\000\000\000\000\000\032\000\000\000\030\000\000\000\000\000\
\028\000\029\000\000\000\032\000\032\000\000\000\032\000\000\000\
\028\000\028\000\000\000\028\000\000\000\000\000\000\000\000\000\
\032\000\000\000\000\000\000\000\000\000\042\000\000\000\000\000\
\000\000\000\000\044\000\000\000\000\000\042\000\042\000\046\000\
\042\000\000\000\044\000\044\000\043\000\044\000\000\000\046\000\
\046\000\000\000\046\000\000\000\043\000\043\000\045\000\043\000\
\000\000\000\000\000\000\000\000\000\000\000\000\045\000\045\000\
\000\000\045\000\042\000\043\000\044\000\045\000\046\000\000\000\
\091\000\048\000\049\000\050\000\051\000\052\000\053\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\054\000\
\055\000\000\000\000\000\000\000\000\000\056\000\000\000\000\000\
\000\000\057\000\042\000\043\000\044\000\045\000\046\000\000\000\
\000\000\048\000\049\000\050\000\051\000\052\000\053\000\000\000\
\000\000\094\000\000\000\000\000\000\000\000\000\000\000\054\000\
\055\000\000\000\000\000\000\000\000\000\056\000\000\000\000\000\
\000\000\057\000\042\000\043\000\044\000\045\000\046\000\000\000\
\000\000\048\000\049\000\050\000\051\000\052\000\053\000\000\000\
\000\000\000\000\000\000\095\000\000\000\000\000\000\000\054\000\
\055\000\000\000\000\000\000\000\000\000\056\000\000\000\000\000\
\000\000\057\000\042\000\043\000\044\000\045\000\046\000\000\000\
\000\000\048\000\049\000\050\000\051\000\052\000\053\000\000\000\
\000\000\000\000\000\000\098\000\000\000\000\000\000\000\054\000\
\055\000\000\000\000\000\000\000\000\000\056\000\000\000\000\000\
\000\000\057\000\042\000\043\000\044\000\045\000\046\000\000\000\
\099\000\048\000\049\000\050\000\051\000\052\000\053\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\054\000\
\055\000\000\000\000\000\000\000\000\000\056\000\000\000\000\000\
\000\000\057\000\042\000\043\000\044\000\045\000\046\000\000\000\
\000\000\048\000\049\000\050\000\051\000\052\000\053\000\000\000\
\000\000\000\000\000\000\102\000\000\000\000\000\000\000\054\000\
\055\000\000\000\000\000\000\000\000\000\056\000\000\000\000\000\
\000\000\057\000\042\000\043\000\044\000\045\000\046\000\000\000\
\000\000\048\000\049\000\050\000\051\000\052\000\053\000\000\000\
\000\000\000\000\000\000\103\000\000\000\000\000\000\000\054\000\
\055\000\000\000\000\000\000\000\000\000\056\000\000\000\000\000\
\000\000\057\000\042\000\043\000\044\000\045\000\046\000\000\000\
\000\000\048\000\049\000\050\000\051\000\052\000\053\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\054\000\
\055\000\000\000\000\000\000\000\000\000\056\000\000\000\000\000\
\000\000\057\000\042\000\043\000\044\000\045\000\046\000\000\000\
\000\000\048\000\049\000\050\000\051\000\052\000\053\000\000\000\
\000\000\000\000\042\000\043\000\044\000\045\000\046\000\054\000\
\055\000\048\000\049\000\050\000\051\000\052\000\053\000\000\000\
\000\000\057\000\000\000\000\000\000\000\000\000\000\000\054\000"

let yycheck = "\019\000\
\000\000\002\001\005\000\006\000\007\000\002\001\001\000\001\001\
\011\000\004\001\002\001\006\001\015\000\016\000\008\001\003\001\
\004\001\005\001\006\001\007\001\021\001\024\000\010\001\011\001\
\012\001\013\001\014\001\015\001\003\001\004\001\005\001\006\001\
\000\000\002\001\035\001\038\000\024\001\025\001\035\001\042\000\
\043\000\044\000\045\000\046\000\015\001\048\000\049\000\050\000\
\051\000\052\000\053\000\054\000\055\000\056\000\057\000\015\001\
\029\001\029\001\000\000\062\000\063\000\015\001\015\001\066\000\
\255\255\068\000\003\001\004\001\005\001\006\001\007\001\255\255\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\099\000\
\255\255\255\255\085\000\255\255\000\000\088\000\089\000\024\001\
\025\001\001\001\002\001\094\000\095\000\030\001\255\255\098\000\
\008\001\034\001\255\255\102\000\103\000\255\255\001\001\002\001\
\255\255\255\255\005\001\255\255\255\255\008\001\022\001\023\001\
\255\255\255\255\255\255\000\000\000\000\016\001\255\255\031\001\
\019\001\255\255\255\255\022\001\023\001\255\255\255\255\026\001\
\027\001\028\001\255\255\255\255\031\001\032\001\033\001\255\255\
\255\255\255\255\255\255\001\001\002\001\255\255\000\000\005\001\
\255\255\255\255\008\001\003\001\004\001\005\001\006\001\007\001\
\255\255\255\255\016\001\255\255\255\255\019\001\255\255\255\255\
\022\001\023\001\255\255\255\255\026\001\027\001\028\001\255\255\
\000\000\031\001\032\001\033\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\003\001\004\001\005\001\006\001\
\007\001\255\255\000\000\010\001\011\001\012\001\013\001\014\001\
\015\001\255\255\017\001\255\255\255\255\255\255\255\255\255\255\
\255\255\024\001\025\001\255\255\000\000\255\255\255\255\030\001\
\255\255\255\255\255\255\034\001\255\255\255\255\255\255\255\255\
\255\255\003\001\004\001\005\001\006\001\007\001\000\000\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\024\001\025\001\
\000\000\255\255\255\255\255\255\030\001\255\255\255\255\255\255\
\034\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\003\001\004\001\005\001\006\001\007\001\
\255\255\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\017\001\018\001\255\255\020\001\000\000\255\255\255\255\
\024\001\025\001\255\255\255\255\255\255\255\255\030\001\255\255\
\255\255\255\255\034\001\003\001\004\001\005\001\006\001\007\001\
\000\000\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\017\001\018\001\255\255\020\001\255\255\255\255\000\000\
\024\001\025\001\255\255\000\000\255\255\003\001\030\001\005\001\
\255\255\007\001\034\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\000\000\017\001\018\001\255\255\020\001\000\000\
\255\255\255\255\024\001\025\001\255\255\255\255\255\255\003\001\
\030\001\005\001\255\255\007\001\034\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\000\000\017\001\018\001\255\255\
\020\001\000\000\255\255\255\255\024\001\025\001\000\000\255\255\
\255\255\255\255\030\001\000\000\255\255\255\255\034\001\003\001\
\004\001\005\001\006\001\007\001\009\001\000\000\010\001\011\001\
\012\001\013\001\014\001\015\001\017\001\018\001\255\255\020\001\
\255\255\255\255\255\255\255\255\024\001\025\001\255\255\255\255\
\255\255\030\001\030\001\255\255\255\255\034\001\034\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\255\255\017\001\
\018\001\255\255\020\001\255\255\255\255\255\255\024\001\025\001\
\255\255\255\255\255\255\255\255\030\001\255\255\255\255\255\255\
\034\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\017\001\018\001\255\255\020\001\255\255\255\255\255\255\
\024\001\025\001\255\255\009\001\255\255\255\255\030\001\255\255\
\255\255\255\255\034\001\017\001\018\001\255\255\020\001\255\255\
\255\255\255\255\024\001\025\001\255\255\009\001\255\255\255\255\
\030\001\255\255\255\255\255\255\034\001\017\001\018\001\255\255\
\020\001\255\255\255\255\255\255\024\001\025\001\255\255\009\001\
\255\255\255\255\030\001\255\255\255\255\255\255\034\001\017\001\
\018\001\255\255\020\001\255\255\255\255\255\255\024\001\025\001\
\255\255\009\001\255\255\255\255\030\001\255\255\255\255\255\255\
\034\001\017\001\018\001\255\255\020\001\255\255\255\255\255\255\
\024\001\025\001\255\255\009\001\255\255\255\255\030\001\255\255\
\255\255\255\255\034\001\017\001\018\001\255\255\020\001\255\255\
\255\255\255\255\024\001\025\001\255\255\255\255\009\001\255\255\
\030\001\255\255\255\255\255\255\034\001\255\255\017\001\018\001\
\255\255\020\001\255\255\255\255\255\255\024\001\025\001\255\255\
\255\255\009\001\255\255\030\001\255\255\255\255\255\255\034\001\
\255\255\017\001\018\001\255\255\020\001\255\255\255\255\255\255\
\009\001\025\001\255\255\255\255\009\001\255\255\030\001\255\255\
\017\001\018\001\034\001\020\001\017\001\018\001\255\255\020\001\
\255\255\255\255\255\255\009\001\255\255\030\001\255\255\255\255\
\009\001\030\001\255\255\017\001\018\001\255\255\020\001\255\255\
\017\001\018\001\255\255\020\001\255\255\255\255\255\255\255\255\
\030\001\255\255\255\255\255\255\255\255\009\001\255\255\255\255\
\255\255\255\255\009\001\255\255\255\255\017\001\018\001\009\001\
\020\001\255\255\017\001\018\001\009\001\020\001\255\255\017\001\
\018\001\255\255\020\001\255\255\017\001\018\001\009\001\020\001\
\255\255\255\255\255\255\255\255\255\255\255\255\017\001\018\001\
\255\255\020\001\003\001\004\001\005\001\006\001\007\001\255\255\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\024\001\
\025\001\255\255\255\255\255\255\255\255\030\001\255\255\255\255\
\255\255\034\001\003\001\004\001\005\001\006\001\007\001\255\255\
\255\255\010\001\011\001\012\001\013\001\014\001\015\001\255\255\
\255\255\018\001\255\255\255\255\255\255\255\255\255\255\024\001\
\025\001\255\255\255\255\255\255\255\255\030\001\255\255\255\255\
\255\255\034\001\003\001\004\001\005\001\006\001\007\001\255\255\
\255\255\010\001\011\001\012\001\013\001\014\001\015\001\255\255\
\255\255\255\255\255\255\020\001\255\255\255\255\255\255\024\001\
\025\001\255\255\255\255\255\255\255\255\030\001\255\255\255\255\
\255\255\034\001\003\001\004\001\005\001\006\001\007\001\255\255\
\255\255\010\001\011\001\012\001\013\001\014\001\015\001\255\255\
\255\255\255\255\255\255\020\001\255\255\255\255\255\255\024\001\
\025\001\255\255\255\255\255\255\255\255\030\001\255\255\255\255\
\255\255\034\001\003\001\004\001\005\001\006\001\007\001\255\255\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\024\001\
\025\001\255\255\255\255\255\255\255\255\030\001\255\255\255\255\
\255\255\034\001\003\001\004\001\005\001\006\001\007\001\255\255\
\255\255\010\001\011\001\012\001\013\001\014\001\015\001\255\255\
\255\255\255\255\255\255\020\001\255\255\255\255\255\255\024\001\
\025\001\255\255\255\255\255\255\255\255\030\001\255\255\255\255\
\255\255\034\001\003\001\004\001\005\001\006\001\007\001\255\255\
\255\255\010\001\011\001\012\001\013\001\014\001\015\001\255\255\
\255\255\255\255\255\255\020\001\255\255\255\255\255\255\024\001\
\025\001\255\255\255\255\255\255\255\255\030\001\255\255\255\255\
\255\255\034\001\003\001\004\001\005\001\006\001\007\001\255\255\
\255\255\010\001\011\001\012\001\013\001\014\001\015\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\024\001\
\025\001\255\255\255\255\255\255\255\255\030\001\255\255\255\255\
\255\255\034\001\003\001\004\001\005\001\006\001\007\001\255\255\
\255\255\010\001\011\001\012\001\013\001\014\001\015\001\255\255\
\255\255\255\255\003\001\004\001\005\001\006\001\007\001\024\001\
\025\001\010\001\011\001\012\001\013\001\014\001\015\001\255\255\
\255\255\034\001\255\255\255\255\255\255\255\255\255\255\024\001"

let yynames_const = "\
  PLUS\000\
  TIMES\000\
  MINUS\000\
  DIV\000\
  MOD\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  L\000\
  LE\000\
  G\000\
  GE\000\
  NE\000\
  EQ\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  REC\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  NOT\000\
  PRINT\000\
  FUN\000\
  FLECHE\000\
  SCOLON\000\
  UNIT\000\
  REF\000\
  EXCL\000\
  REVAL\000\
  UNDERSCORE\000\
  "

let yynames_block = "\
  INT\000\
  VAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 57 "parser.mly"
                                        ( _1 )
# 453 "parser.ml"
               : Types.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 62 "parser.mly"
                                                    ( Const _1 )
# 460 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "parser.mly"
                                                    ( BConst true)
# 466 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "parser.mly"
                                                    ( BConst false )
# 472 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 65 "parser.mly"
                                                    ( Var (Nom _1) )
# 479 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "parser.mly"
                                                    ( Unit )
# 485 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'applic) in
    Obj.repr(
# 67 "parser.mly"
                                                    ( _1 )
# 492 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 68 "parser.mly"
                                                    ( _2 )
# 499 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 69 "parser.mly"
                                                    ( ArithOp (Add,_1,_3) )
# 507 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 70 "parser.mly"
                                                    ( ArithOp (Mul,_1,_3) )
# 515 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 71 "parser.mly"
                                                    ( ArithOp (Min,_1,_3) )
# 523 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 72 "parser.mly"
                                                    ( ArithOp (Div,_1,_3) )
# 531 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 73 "parser.mly"
                                                    ( ArithOp (Mod,_1,_3) )
# 539 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 74 "parser.mly"
                                                    ( ArithOp (Min,Const 0, _2) )
# 546 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 75 "parser.mly"
                                                    ( CompOp (L,_1,_3) )
# 554 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 76 "parser.mly"
                                                    ( CompOp (Le,_1,_3) )
# 562 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 77 "parser.mly"
                                                    ( CompOp (G,_1,_3) )
# 570 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 78 "parser.mly"
                                                    ( CompOp (Ge,_1,_3) )
# 578 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 79 "parser.mly"
                                                    ( CompOp (Eq,_1,_3) )
# 586 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 80 "parser.mly"
                                                    ( CompOp (Ne,_1,_3) )
# 594 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 81 "parser.mly"
                                                    ( BoolOp (Or,_1,_3) )
# 602 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 82 "parser.mly"
                                                    ( BoolOp (And,_1,_3) )
# 610 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 83 "parser.mly"
                                                    ( BoolOp (Not,_2, BConst true) )
# 617 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'condition) in
    Obj.repr(
# 84 "parser.mly"
                                                    ( _1 )
# 624 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 85 "parser.mly"
                                                    ( PrInt (Const _2) )
# 631 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 86 "parser.mly"
                                                    ( PrInt _3 )
# 638 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'declaration) in
    Obj.repr(
# 87 "parser.mly"
                                                    ( _1 )
# 645 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 88 "parser.mly"
                                                    ( Fun (Nom _2,_4) )
# 653 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 89 "parser.mly"
                                                    ( Seq (_1,_3) )
# 661 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 90 "parser.mly"
                                                    ( Ref _2 )
# 668 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 91 "parser.mly"
                                                    ( ValRef _2 )
# 675 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 92 "parser.mly"
                                                    ( RefNew (_1,_3) )
# 683 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 95 "parser.mly"
                                                    ( Const _1 )
# 690 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 96 "parser.mly"
                                                    ( BConst true)
# 696 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 97 "parser.mly"
                                                    ( BConst false )
# 702 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 98 "parser.mly"
                                                    ( Var (Nom _1) )
# 709 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 99 "parser.mly"
                                                    ( Unit )
# 715 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 100 "parser.mly"
                                                    ( _2 )
# 722 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'applic) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 103 "parser.mly"
                                                    ( App (_1,_2) )
# 730 "parser.ml"
               : 'applic))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 104 "parser.mly"
                                                    ( App (Var (Nom _1),_2) )
# 738 "parser.ml"
               : 'applic))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 105 "parser.mly"
                                                    ( App (Fun(Nom _3,_5),_7) )
# 747 "parser.ml"
               : 'applic))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 108 "parser.mly"
                                                    ( If(_2,_4,_6) )
# 756 "parser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 111 "parser.mly"
                                                    ( Let (Nom _3,true,_5,_7) )
# 765 "parser.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 112 "parser.mly"
                                                    ( Let (Nom _2,false,_4,_6) )
# 774 "parser.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 113 "parser.mly"
                                                    ( Let (None,true,_5,_7) )
# 782 "parser.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 114 "parser.mly"
                                                    ( Let (None,false,_4,_6) )
# 790 "parser.ml"
               : 'declaration))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Types.expr)
