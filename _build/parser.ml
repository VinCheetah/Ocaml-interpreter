type token =
  | INT of (int)
  | VAR of (string)
  | PLUS
  | TIMES
  | MINUS
  | DIV
  | MOD
  | LPAREN
  | RPAREN
  | EOF
  | L
  | LE
  | G
  | GE
  | NE
  | EQ
  | IF
  | THEN
  | ELSE
  | LET
  | IN
  | REC
  | TRUE
  | FALSE
  | AND
  | OR
  | NOT
  | PRINT
  | FUN
  | FLECHE
  | SCOLON
  | DSCOLON
  | UNIT
  | REF
  | EXCL
  | REVAL
  | UNDERSCORE
  | E
  | RAISE
  | TRY
  | WITH
  | INCR

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* --- pr√©ambule: ici du code Caml --- *)

open Types   (* rappel: dans Types.ml: 
             type expr = Const of int | Add of expr*expr | Mull of expr*expr *)

# 54 "parser.ml"
let yytransl_const = [|
  259 (* PLUS *);
  260 (* TIMES *);
  261 (* MINUS *);
  262 (* DIV *);
  263 (* MOD *);
  264 (* LPAREN *);
  265 (* RPAREN *);
    0 (* EOF *);
  266 (* L *);
  267 (* LE *);
  268 (* G *);
  269 (* GE *);
  270 (* NE *);
  271 (* EQ *);
  272 (* IF *);
  273 (* THEN *);
  274 (* ELSE *);
  275 (* LET *);
  276 (* IN *);
  277 (* REC *);
  278 (* TRUE *);
  279 (* FALSE *);
  280 (* AND *);
  281 (* OR *);
  282 (* NOT *);
  283 (* PRINT *);
  284 (* FUN *);
  285 (* FLECHE *);
  286 (* SCOLON *);
  287 (* DSCOLON *);
  288 (* UNIT *);
  289 (* REF *);
  290 (* EXCL *);
  291 (* REVAL *);
  292 (* UNDERSCORE *);
  293 (* E *);
  294 (* RAISE *);
  295 (* TRY *);
  296 (* WITH *);
  297 (* INCR *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* VAR *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\003\000\003\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\006\000\006\000\004\000\004\000\004\000\007\000\
\007\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\001\000\001\000\001\000\003\000\003\000\
\003\000\003\000\003\000\003\000\002\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\002\000\006\000\003\000\
\004\000\005\000\004\000\003\000\002\000\003\000\003\000\003\000\
\002\000\002\000\006\000\002\000\002\000\002\000\002\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\002\000\001\000\
\001\000\003\000\002\000\002\000\002\000\003\000\003\000\002\000\
\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\043\000\000\000\000\000\000\000\000\000\058\000\000\000\005\000\
\000\000\040\000\000\000\042\000\000\000\051\000\000\000\000\000\
\000\000\000\000\000\000\000\000\044\000\048\000\000\000\045\000\
\046\000\049\000\000\000\039\000\052\000\037\000\000\000\000\000\
\000\000\000\000\038\000\000\000\000\000\000\000\000\000\000\000\
\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\057\000\056\000\000\000\
\000\000\053\000\000\000\000\000\000\000\000\000\024\000\000\000\
\047\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\031\000\000\000\000\000\000\000\000\000\000\000\000\000\025\000\
\000\000\050\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\022\000\023\000\024\000\030\000\025\000\026\000\027\000"

let yysindex = "\255\255\
\090\255\000\000\000\000\225\254\090\255\090\255\090\255\010\255\
\000\000\000\000\090\255\144\255\008\255\000\000\144\255\144\255\
\000\000\090\255\090\255\090\255\144\255\000\000\200\003\000\000\
\144\255\000\000\144\255\000\000\009\255\000\000\232\254\178\255\
\211\255\008\255\012\255\167\255\000\000\000\000\090\255\000\000\
\000\000\000\000\144\255\000\000\000\000\000\000\000\000\232\254\
\232\254\129\255\000\000\090\255\090\255\090\255\090\255\090\255\
\000\000\090\255\090\255\090\255\090\255\090\255\090\255\090\255\
\090\255\090\255\090\255\090\255\090\255\000\000\000\000\090\255\
\090\255\000\000\000\000\090\255\018\255\090\255\000\000\233\003\
\000\000\090\255\072\255\232\254\072\255\232\254\246\255\167\255\
\167\255\167\255\167\255\167\255\167\255\109\004\203\004\175\004\
\000\000\076\004\175\004\167\255\142\004\010\004\090\255\000\000\
\167\255\000\000\043\004\090\255\167\255\090\255\142\004\142\004"

let yyrindex = "\000\000\
\000\000\000\000\001\000\239\000\000\000\000\000\000\000\000\000\
\041\000\081\000\000\000\000\000\000\000\121\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\022\001\000\000\000\000\000\000\060\001\000\000\
\000\000\000\000\000\000\108\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\161\000\100\001\
\140\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\180\001\000\000\000\000\000\000\000\000\
\000\000\000\000\201\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\038\002\220\001\076\002\002\002\141\002\162\002\
\181\002\202\002\221\002\242\002\010\003\168\003\099\003\109\003\
\000\000\119\001\134\003\029\003\138\003\000\000\000\000\000\000\
\054\003\000\000\000\000\000\000\075\003\000\000\144\003\162\003"

let yygindex = "\000\000\
\000\000\253\255\005\000\250\255\072\000\000\000\000\000"

let yytablesize = 1513
let yytable = "\001\000\
\002\000\031\000\032\000\033\000\017\000\067\000\045\000\036\000\
\029\000\028\000\028\000\028\000\035\000\028\000\048\000\049\000\
\050\000\029\000\000\000\028\000\000\000\000\000\074\000\072\000\
\000\000\000\000\078\000\000\000\079\000\000\000\034\000\000\000\
\103\000\029\000\000\000\080\000\000\000\073\000\077\000\029\000\
\003\000\000\000\000\000\017\000\017\000\017\000\000\000\017\000\
\083\000\084\000\085\000\086\000\087\000\017\000\088\000\089\000\
\090\000\091\000\092\000\093\000\094\000\095\000\096\000\097\000\
\098\000\099\000\000\000\000\000\100\000\101\000\104\000\000\000\
\102\000\000\000\105\000\053\000\000\000\055\000\107\000\000\000\
\004\000\029\000\000\000\044\000\000\000\000\000\046\000\047\000\
\000\000\000\000\003\000\004\000\051\000\000\000\005\000\000\000\
\070\000\006\000\071\000\109\000\000\000\067\000\000\000\000\000\
\111\000\007\000\112\000\000\000\008\000\000\000\000\000\009\000\
\010\000\000\000\081\000\011\000\012\000\013\000\000\000\000\000\
\006\000\014\000\015\000\016\000\000\000\017\000\018\000\019\000\
\020\000\000\000\021\000\052\000\053\000\054\000\055\000\056\000\
\000\000\000\000\058\000\059\000\060\000\061\000\062\000\063\000\
\037\000\038\000\000\000\000\000\064\000\000\000\000\000\039\000\
\065\000\066\000\000\000\000\000\000\000\000\000\067\000\068\000\
\036\000\000\000\000\000\069\000\000\000\040\000\041\000\000\000\
\082\000\052\000\053\000\054\000\055\000\056\000\000\000\042\000\
\000\000\043\000\000\000\000\000\052\000\053\000\054\000\055\000\
\056\000\000\000\075\000\058\000\059\000\060\000\061\000\062\000\
\063\000\000\000\000\000\000\000\067\000\064\000\000\000\000\000\
\007\000\065\000\066\000\000\000\000\000\000\000\000\000\067\000\
\068\000\000\000\000\000\000\000\069\000\052\000\053\000\054\000\
\055\000\056\000\000\000\000\000\058\000\059\000\060\000\061\000\
\062\000\063\000\000\000\076\000\000\000\000\000\064\000\000\000\
\000\000\000\000\065\000\066\000\000\000\000\000\042\000\000\000\
\067\000\068\000\000\000\000\000\000\000\069\000\000\000\000\000\
\052\000\053\000\054\000\055\000\000\000\000\000\000\000\000\000\
\000\000\044\000\044\000\002\000\002\000\002\000\002\000\002\000\
\044\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\000\000\002\000\002\000\067\000\002\000\041\000\044\000\044\000\
\002\000\002\000\000\000\000\000\000\000\002\000\002\000\002\000\
\044\000\000\000\044\000\002\000\000\000\000\000\000\000\000\000\
\002\000\045\000\045\000\003\000\003\000\003\000\003\000\003\000\
\045\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\000\000\003\000\003\000\013\000\003\000\000\000\045\000\045\000\
\003\000\003\000\000\000\000\000\000\000\003\000\003\000\003\000\
\045\000\000\000\045\000\003\000\000\000\000\000\000\000\000\000\
\003\000\046\000\046\000\004\000\004\000\004\000\004\000\004\000\
\046\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\000\000\004\000\004\000\033\000\004\000\000\000\046\000\046\000\
\004\000\004\000\000\000\000\000\000\000\004\000\004\000\004\000\
\046\000\000\000\046\000\004\000\000\000\000\000\030\000\000\000\
\004\000\049\000\049\000\006\000\006\000\006\000\006\000\006\000\
\049\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\000\000\006\000\006\000\034\000\006\000\000\000\049\000\049\000\
\006\000\006\000\000\000\000\000\000\000\006\000\006\000\006\000\
\049\000\000\000\049\000\006\000\000\000\000\000\000\000\000\000\
\006\000\047\000\047\000\036\000\036\000\036\000\036\000\036\000\
\047\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
\000\000\036\000\036\000\029\000\036\000\000\000\047\000\047\000\
\036\000\036\000\000\000\000\000\000\000\036\000\036\000\036\000\
\047\000\000\000\047\000\036\000\000\000\000\000\000\000\000\000\
\036\000\050\000\050\000\007\000\007\000\007\000\007\000\007\000\
\050\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\000\000\007\000\007\000\009\000\007\000\000\000\050\000\050\000\
\007\000\007\000\000\000\000\000\000\000\007\000\007\000\007\000\
\050\000\000\000\050\000\007\000\000\000\000\000\000\000\048\000\
\007\000\042\000\042\000\042\000\042\000\042\000\048\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\000\000\042\000\
\042\000\011\000\042\000\000\000\048\000\048\000\042\000\042\000\
\000\000\000\000\000\000\042\000\042\000\042\000\048\000\000\000\
\048\000\042\000\000\000\000\000\000\000\000\000\042\000\000\000\
\041\000\041\000\041\000\041\000\041\000\000\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\008\000\041\000\041\000\
\000\000\041\000\000\000\000\000\000\000\041\000\041\000\000\000\
\000\000\000\000\041\000\041\000\041\000\000\000\000\000\000\000\
\041\000\000\000\000\000\000\000\000\000\041\000\013\000\013\000\
\013\000\013\000\013\000\000\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\010\000\013\000\013\000\000\000\013\000\
\000\000\000\000\000\000\013\000\013\000\000\000\000\000\000\000\
\013\000\000\000\013\000\000\000\000\000\000\000\013\000\000\000\
\000\000\000\000\000\000\013\000\000\000\000\000\033\000\033\000\
\033\000\033\000\033\000\022\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\000\000\033\000\033\000\000\000\033\000\
\000\000\000\000\000\000\033\000\033\000\000\000\000\000\030\000\
\033\000\000\000\033\000\000\000\000\000\000\000\033\000\030\000\
\030\000\000\000\000\000\033\000\012\000\000\000\034\000\034\000\
\034\000\034\000\034\000\030\000\034\000\034\000\034\000\034\000\
\034\000\034\000\034\000\000\000\034\000\034\000\030\000\034\000\
\000\000\014\000\000\000\034\000\034\000\000\000\000\000\000\000\
\034\000\000\000\034\000\000\000\000\000\000\000\034\000\000\000\
\000\000\000\000\000\000\034\000\015\000\000\000\029\000\029\000\
\000\000\029\000\029\000\000\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\000\000\029\000\029\000\000\000\029\000\
\000\000\016\000\000\000\029\000\029\000\000\000\000\000\000\000\
\029\000\029\000\029\000\000\000\000\000\000\000\029\000\000\000\
\000\000\000\000\000\000\029\000\017\000\000\000\009\000\009\000\
\009\000\009\000\009\000\000\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\000\000\009\000\009\000\000\000\009\000\
\000\000\019\000\000\000\009\000\009\000\000\000\000\000\000\000\
\009\000\000\000\009\000\000\000\000\000\000\000\009\000\000\000\
\000\000\000\000\000\000\009\000\011\000\011\000\011\000\011\000\
\011\000\018\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\000\000\011\000\011\000\000\000\011\000\000\000\000\000\
\000\000\011\000\011\000\000\000\054\000\000\000\011\000\000\000\
\011\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\
\008\000\011\000\008\000\000\000\008\000\000\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\027\000\008\000\008\000\
\000\000\008\000\000\000\000\000\000\000\008\000\008\000\000\000\
\000\000\000\000\008\000\000\000\008\000\000\000\000\000\000\000\
\008\000\000\000\026\000\000\000\000\000\008\000\010\000\000\000\
\010\000\000\000\010\000\000\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\000\000\010\000\010\000\000\000\010\000\
\000\000\000\000\021\000\010\000\010\000\000\000\000\000\000\000\
\010\000\000\000\010\000\000\000\020\000\000\000\010\000\000\000\
\000\000\000\000\000\000\010\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\000\000\022\000\022\000\000\000\022\000\
\000\000\000\000\000\000\022\000\022\000\032\000\000\000\000\000\
\022\000\055\000\022\000\000\000\000\000\000\000\022\000\023\000\
\000\000\000\000\000\000\022\000\000\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\000\000\012\000\012\000\000\000\
\012\000\035\000\000\000\000\000\012\000\012\000\000\000\028\000\
\000\000\012\000\014\000\012\000\000\000\000\000\000\000\012\000\
\000\000\000\000\014\000\014\000\012\000\014\000\000\000\000\000\
\000\000\014\000\014\000\000\000\000\000\015\000\014\000\000\000\
\014\000\000\000\000\000\000\000\014\000\015\000\015\000\057\000\
\015\000\014\000\000\000\000\000\015\000\015\000\000\000\000\000\
\000\000\015\000\016\000\015\000\000\000\000\000\000\000\015\000\
\000\000\000\000\016\000\016\000\015\000\016\000\000\000\000\000\
\000\000\016\000\016\000\000\000\000\000\017\000\016\000\000\000\
\016\000\000\000\000\000\000\000\016\000\017\000\017\000\000\000\
\017\000\016\000\000\000\000\000\017\000\017\000\000\000\000\000\
\000\000\017\000\019\000\017\000\000\000\000\000\000\000\017\000\
\000\000\000\000\019\000\019\000\017\000\019\000\000\000\000\000\
\000\000\019\000\019\000\000\000\000\000\000\000\019\000\000\000\
\019\000\000\000\018\000\000\000\019\000\000\000\000\000\000\000\
\000\000\019\000\018\000\018\000\000\000\018\000\000\000\000\000\
\000\000\018\000\018\000\000\000\000\000\054\000\018\000\000\000\
\018\000\000\000\000\000\000\000\018\000\054\000\054\000\000\000\
\054\000\018\000\000\000\000\000\054\000\054\000\000\000\000\000\
\000\000\054\000\000\000\054\000\000\000\000\000\027\000\054\000\
\000\000\000\000\000\000\000\000\054\000\000\000\027\000\027\000\
\000\000\027\000\000\000\000\000\000\000\027\000\027\000\000\000\
\000\000\000\000\027\000\026\000\027\000\000\000\000\000\000\000\
\027\000\000\000\000\000\026\000\026\000\027\000\026\000\000\000\
\000\000\000\000\026\000\026\000\000\000\000\000\000\000\026\000\
\000\000\026\000\000\000\021\000\000\000\026\000\000\000\000\000\
\000\000\000\000\026\000\021\000\021\000\020\000\021\000\000\000\
\000\000\000\000\000\000\021\000\000\000\020\000\020\000\021\000\
\020\000\021\000\000\000\000\000\000\000\021\000\000\000\000\000\
\000\000\020\000\021\000\020\000\000\000\000\000\032\000\020\000\
\000\000\000\000\055\000\000\000\020\000\000\000\032\000\032\000\
\023\000\032\000\055\000\055\000\000\000\055\000\000\000\000\000\
\023\000\023\000\032\000\023\000\032\000\000\000\055\000\000\000\
\055\000\000\000\035\000\000\000\023\000\032\000\023\000\000\000\
\028\000\055\000\035\000\035\000\000\000\035\000\000\000\023\000\
\028\000\028\000\000\000\000\000\000\000\000\000\035\000\000\000\
\035\000\000\000\000\000\000\000\028\000\000\000\028\000\000\000\
\000\000\035\000\052\000\053\000\054\000\055\000\056\000\028\000\
\000\000\058\000\059\000\060\000\061\000\062\000\063\000\000\000\
\000\000\000\000\000\000\064\000\000\000\000\000\000\000\065\000\
\066\000\000\000\000\000\000\000\000\000\067\000\068\000\000\000\
\000\000\000\000\069\000\052\000\053\000\054\000\055\000\056\000\
\000\000\106\000\058\000\059\000\060\000\061\000\062\000\063\000\
\000\000\000\000\000\000\000\000\064\000\000\000\000\000\000\000\
\065\000\066\000\000\000\000\000\000\000\000\000\067\000\068\000\
\000\000\000\000\000\000\069\000\052\000\053\000\054\000\055\000\
\056\000\000\000\000\000\058\000\059\000\060\000\061\000\062\000\
\063\000\000\000\000\000\108\000\000\000\064\000\000\000\000\000\
\000\000\065\000\066\000\000\000\000\000\000\000\000\000\067\000\
\068\000\000\000\000\000\000\000\069\000\052\000\053\000\054\000\
\055\000\056\000\000\000\000\000\058\000\059\000\060\000\061\000\
\062\000\063\000\000\000\000\000\000\000\000\000\064\000\000\000\
\000\000\000\000\065\000\066\000\000\000\000\000\000\000\110\000\
\067\000\068\000\000\000\000\000\000\000\069\000\052\000\053\000\
\054\000\055\000\056\000\000\000\000\000\058\000\059\000\060\000\
\061\000\062\000\063\000\000\000\000\000\000\000\000\000\064\000\
\000\000\000\000\000\000\065\000\066\000\000\000\000\000\000\000\
\000\000\067\000\068\000\000\000\000\000\000\000\069\000\052\000\
\053\000\054\000\055\000\056\000\000\000\000\000\058\000\059\000\
\060\000\061\000\062\000\063\000\000\000\000\000\000\000\000\000\
\064\000\000\000\000\000\000\000\065\000\066\000\000\000\000\000\
\000\000\000\000\067\000\000\000\000\000\000\000\000\000\069\000\
\052\000\053\000\054\000\055\000\056\000\000\000\000\000\058\000\
\059\000\060\000\061\000\062\000\063\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\065\000\066\000\000\000\
\000\000\000\000\000\000\067\000\000\000\000\000\000\000\000\000\
\069\000\052\000\053\000\054\000\055\000\056\000\000\000\000\000\
\058\000\059\000\060\000\061\000\062\000\063\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\065\000\066\000\
\000\000\000\000\000\000\000\000\067\000\052\000\053\000\054\000\
\055\000\056\000\000\000\000\000\058\000\059\000\060\000\061\000\
\062\000\063\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\065\000\000\000\000\000\000\000\000\000\000\000\
\067\000"

let yycheck = "\001\000\
\000\000\005\000\006\000\007\000\036\001\030\001\013\000\011\000\
\004\000\002\001\002\001\002\001\008\000\002\001\018\000\019\000\
\020\000\013\000\255\255\002\001\255\255\255\255\029\000\015\001\
\255\255\255\255\015\001\255\255\035\000\255\255\021\001\255\255\
\015\001\029\000\255\255\039\000\255\255\029\001\034\000\035\000\
\000\000\255\255\255\255\036\001\036\001\036\001\255\255\036\001\
\052\000\053\000\054\000\055\000\056\000\036\001\058\000\059\000\
\060\000\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\255\255\255\255\072\000\073\000\077\000\255\255\
\076\000\255\255\078\000\004\001\255\255\006\001\082\000\255\255\
\000\000\077\000\255\255\012\000\255\255\255\255\015\000\016\000\
\255\255\255\255\001\001\002\001\021\000\255\255\005\001\255\255\
\025\000\008\001\027\000\103\000\255\255\030\001\255\255\255\255\
\108\000\016\001\110\000\255\255\019\001\255\255\255\255\022\001\
\023\001\255\255\043\000\026\001\027\001\028\001\255\255\255\255\
\000\000\032\001\033\001\034\001\255\255\036\001\037\001\038\001\
\039\001\255\255\041\001\003\001\004\001\005\001\006\001\007\001\
\255\255\255\255\010\001\011\001\012\001\013\001\014\001\015\001\
\001\001\002\001\255\255\255\255\020\001\255\255\255\255\008\001\
\024\001\025\001\255\255\255\255\255\255\255\255\030\001\031\001\
\000\000\255\255\255\255\035\001\255\255\022\001\023\001\255\255\
\040\001\003\001\004\001\005\001\006\001\007\001\255\255\032\001\
\255\255\034\001\255\255\255\255\003\001\004\001\005\001\006\001\
\007\001\255\255\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\255\255\255\255\255\255\030\001\020\001\255\255\255\255\
\000\000\024\001\025\001\255\255\255\255\255\255\255\255\030\001\
\031\001\255\255\255\255\255\255\035\001\003\001\004\001\005\001\
\006\001\007\001\255\255\255\255\010\001\011\001\012\001\013\001\
\014\001\015\001\255\255\017\001\255\255\255\255\020\001\255\255\
\255\255\255\255\024\001\025\001\255\255\255\255\000\000\255\255\
\030\001\031\001\255\255\255\255\255\255\035\001\255\255\255\255\
\003\001\004\001\005\001\006\001\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\017\001\018\001\030\001\020\001\000\000\022\001\023\001\
\024\001\025\001\255\255\255\255\255\255\029\001\030\001\031\001\
\032\001\255\255\034\001\035\001\255\255\255\255\255\255\255\255\
\040\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\017\001\018\001\000\000\020\001\255\255\022\001\023\001\
\024\001\025\001\255\255\255\255\255\255\029\001\030\001\031\001\
\032\001\255\255\034\001\035\001\255\255\255\255\255\255\255\255\
\040\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\017\001\018\001\000\000\020\001\255\255\022\001\023\001\
\024\001\025\001\255\255\255\255\255\255\029\001\030\001\031\001\
\032\001\255\255\034\001\035\001\255\255\255\255\000\000\255\255\
\040\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\017\001\018\001\000\000\020\001\255\255\022\001\023\001\
\024\001\025\001\255\255\255\255\255\255\029\001\030\001\031\001\
\032\001\255\255\034\001\035\001\255\255\255\255\255\255\255\255\
\040\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\017\001\018\001\000\000\020\001\255\255\022\001\023\001\
\024\001\025\001\255\255\255\255\255\255\029\001\030\001\031\001\
\032\001\255\255\034\001\035\001\255\255\255\255\255\255\255\255\
\040\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\017\001\018\001\000\000\020\001\255\255\022\001\023\001\
\024\001\025\001\255\255\255\255\255\255\029\001\030\001\031\001\
\032\001\255\255\034\001\035\001\255\255\255\255\255\255\001\001\
\040\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\255\255\017\001\
\018\001\000\000\020\001\255\255\022\001\023\001\024\001\025\001\
\255\255\255\255\255\255\029\001\030\001\031\001\032\001\255\255\
\034\001\035\001\255\255\255\255\255\255\255\255\040\001\255\255\
\003\001\004\001\005\001\006\001\007\001\255\255\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\000\000\017\001\018\001\
\255\255\020\001\255\255\255\255\255\255\024\001\025\001\255\255\
\255\255\255\255\029\001\030\001\031\001\255\255\255\255\255\255\
\035\001\255\255\255\255\255\255\255\255\040\001\003\001\004\001\
\005\001\006\001\007\001\255\255\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\000\000\017\001\018\001\255\255\020\001\
\255\255\255\255\255\255\024\001\025\001\255\255\255\255\255\255\
\029\001\255\255\031\001\255\255\255\255\255\255\035\001\255\255\
\255\255\255\255\255\255\040\001\255\255\255\255\003\001\004\001\
\005\001\006\001\007\001\000\000\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\255\255\017\001\018\001\255\255\020\001\
\255\255\255\255\255\255\024\001\025\001\255\255\255\255\009\001\
\029\001\255\255\031\001\255\255\255\255\255\255\035\001\017\001\
\018\001\255\255\255\255\040\001\000\000\255\255\003\001\004\001\
\005\001\006\001\007\001\029\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\255\255\017\001\018\001\040\001\020\001\
\255\255\000\000\255\255\024\001\025\001\255\255\255\255\255\255\
\029\001\255\255\031\001\255\255\255\255\255\255\035\001\255\255\
\255\255\255\255\255\255\040\001\000\000\255\255\003\001\004\001\
\255\255\006\001\007\001\255\255\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\255\255\017\001\018\001\255\255\020\001\
\255\255\000\000\255\255\024\001\025\001\255\255\255\255\255\255\
\029\001\030\001\031\001\255\255\255\255\255\255\035\001\255\255\
\255\255\255\255\255\255\040\001\000\000\255\255\003\001\004\001\
\005\001\006\001\007\001\255\255\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\255\255\017\001\018\001\255\255\020\001\
\255\255\000\000\255\255\024\001\025\001\255\255\255\255\255\255\
\029\001\255\255\031\001\255\255\255\255\255\255\035\001\255\255\
\255\255\255\255\255\255\040\001\003\001\004\001\005\001\006\001\
\007\001\000\000\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\255\255\017\001\018\001\255\255\020\001\255\255\255\255\
\255\255\024\001\025\001\255\255\000\000\255\255\029\001\255\255\
\031\001\255\255\255\255\255\255\035\001\255\255\255\255\255\255\
\003\001\040\001\005\001\255\255\007\001\255\255\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\000\000\017\001\018\001\
\255\255\020\001\255\255\255\255\255\255\024\001\025\001\255\255\
\255\255\255\255\029\001\255\255\031\001\255\255\255\255\255\255\
\035\001\255\255\000\000\255\255\255\255\040\001\003\001\255\255\
\005\001\255\255\007\001\255\255\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\255\255\017\001\018\001\255\255\020\001\
\255\255\255\255\000\000\024\001\025\001\255\255\255\255\255\255\
\029\001\255\255\031\001\255\255\000\000\255\255\035\001\255\255\
\255\255\255\255\255\255\040\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\255\255\017\001\018\001\255\255\020\001\
\255\255\255\255\255\255\024\001\025\001\000\000\255\255\255\255\
\029\001\000\000\031\001\255\255\255\255\255\255\035\001\000\000\
\255\255\255\255\255\255\040\001\255\255\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\255\255\017\001\018\001\255\255\
\020\001\000\000\255\255\255\255\024\001\025\001\255\255\000\000\
\255\255\029\001\009\001\031\001\255\255\255\255\255\255\035\001\
\255\255\255\255\017\001\018\001\040\001\020\001\255\255\255\255\
\255\255\024\001\025\001\255\255\255\255\009\001\029\001\255\255\
\031\001\255\255\255\255\255\255\035\001\017\001\018\001\000\000\
\020\001\040\001\255\255\255\255\024\001\025\001\255\255\255\255\
\255\255\029\001\009\001\031\001\255\255\255\255\255\255\035\001\
\255\255\255\255\017\001\018\001\040\001\020\001\255\255\255\255\
\255\255\024\001\025\001\255\255\255\255\009\001\029\001\255\255\
\031\001\255\255\255\255\255\255\035\001\017\001\018\001\255\255\
\020\001\040\001\255\255\255\255\024\001\025\001\255\255\255\255\
\255\255\029\001\009\001\031\001\255\255\255\255\255\255\035\001\
\255\255\255\255\017\001\018\001\040\001\020\001\255\255\255\255\
\255\255\024\001\025\001\255\255\255\255\255\255\029\001\255\255\
\031\001\255\255\009\001\255\255\035\001\255\255\255\255\255\255\
\255\255\040\001\017\001\018\001\255\255\020\001\255\255\255\255\
\255\255\024\001\025\001\255\255\255\255\009\001\029\001\255\255\
\031\001\255\255\255\255\255\255\035\001\017\001\018\001\255\255\
\020\001\040\001\255\255\255\255\024\001\025\001\255\255\255\255\
\255\255\029\001\255\255\031\001\255\255\255\255\009\001\035\001\
\255\255\255\255\255\255\255\255\040\001\255\255\017\001\018\001\
\255\255\020\001\255\255\255\255\255\255\024\001\025\001\255\255\
\255\255\255\255\029\001\009\001\031\001\255\255\255\255\255\255\
\035\001\255\255\255\255\017\001\018\001\040\001\020\001\255\255\
\255\255\255\255\024\001\025\001\255\255\255\255\255\255\029\001\
\255\255\031\001\255\255\009\001\255\255\035\001\255\255\255\255\
\255\255\255\255\040\001\017\001\018\001\009\001\020\001\255\255\
\255\255\255\255\255\255\025\001\255\255\017\001\018\001\029\001\
\020\001\031\001\255\255\255\255\255\255\035\001\255\255\255\255\
\255\255\029\001\040\001\031\001\255\255\255\255\009\001\035\001\
\255\255\255\255\009\001\255\255\040\001\255\255\017\001\018\001\
\009\001\020\001\017\001\018\001\255\255\020\001\255\255\255\255\
\017\001\018\001\029\001\020\001\031\001\255\255\029\001\255\255\
\031\001\255\255\009\001\255\255\029\001\040\001\031\001\255\255\
\009\001\040\001\017\001\018\001\255\255\020\001\255\255\040\001\
\017\001\018\001\255\255\255\255\255\255\255\255\029\001\255\255\
\031\001\255\255\255\255\255\255\029\001\255\255\031\001\255\255\
\255\255\040\001\003\001\004\001\005\001\006\001\007\001\040\001\
\255\255\010\001\011\001\012\001\013\001\014\001\015\001\255\255\
\255\255\255\255\255\255\020\001\255\255\255\255\255\255\024\001\
\025\001\255\255\255\255\255\255\255\255\030\001\031\001\255\255\
\255\255\255\255\035\001\003\001\004\001\005\001\006\001\007\001\
\255\255\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\255\255\255\255\255\255\020\001\255\255\255\255\255\255\
\024\001\025\001\255\255\255\255\255\255\255\255\030\001\031\001\
\255\255\255\255\255\255\035\001\003\001\004\001\005\001\006\001\
\007\001\255\255\255\255\010\001\011\001\012\001\013\001\014\001\
\015\001\255\255\255\255\018\001\255\255\020\001\255\255\255\255\
\255\255\024\001\025\001\255\255\255\255\255\255\255\255\030\001\
\031\001\255\255\255\255\255\255\035\001\003\001\004\001\005\001\
\006\001\007\001\255\255\255\255\010\001\011\001\012\001\013\001\
\014\001\015\001\255\255\255\255\255\255\255\255\020\001\255\255\
\255\255\255\255\024\001\025\001\255\255\255\255\255\255\029\001\
\030\001\031\001\255\255\255\255\255\255\035\001\003\001\004\001\
\005\001\006\001\007\001\255\255\255\255\010\001\011\001\012\001\
\013\001\014\001\015\001\255\255\255\255\255\255\255\255\020\001\
\255\255\255\255\255\255\024\001\025\001\255\255\255\255\255\255\
\255\255\030\001\031\001\255\255\255\255\255\255\035\001\003\001\
\004\001\005\001\006\001\007\001\255\255\255\255\010\001\011\001\
\012\001\013\001\014\001\015\001\255\255\255\255\255\255\255\255\
\020\001\255\255\255\255\255\255\024\001\025\001\255\255\255\255\
\255\255\255\255\030\001\255\255\255\255\255\255\255\255\035\001\
\003\001\004\001\005\001\006\001\007\001\255\255\255\255\010\001\
\011\001\012\001\013\001\014\001\015\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\024\001\025\001\255\255\
\255\255\255\255\255\255\030\001\255\255\255\255\255\255\255\255\
\035\001\003\001\004\001\005\001\006\001\007\001\255\255\255\255\
\010\001\011\001\012\001\013\001\014\001\015\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\024\001\025\001\
\255\255\255\255\255\255\255\255\030\001\003\001\004\001\005\001\
\006\001\007\001\255\255\255\255\010\001\011\001\012\001\013\001\
\014\001\015\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\024\001\255\255\255\255\255\255\255\255\255\255\
\030\001"

let yynames_const = "\
  PLUS\000\
  TIMES\000\
  MINUS\000\
  DIV\000\
  MOD\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  L\000\
  LE\000\
  G\000\
  GE\000\
  NE\000\
  EQ\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  REC\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  NOT\000\
  PRINT\000\
  FUN\000\
  FLECHE\000\
  SCOLON\000\
  DSCOLON\000\
  UNIT\000\
  REF\000\
  EXCL\000\
  REVAL\000\
  UNDERSCORE\000\
  E\000\
  RAISE\000\
  TRY\000\
  WITH\000\
  INCR\000\
  "

let yynames_block = "\
  INT\000\
  VAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 66 "parser.mly"
                                        ( _1 )
# 617 "parser.ml"
               : Types.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 71 "parser.mly"
                                                       ( Const _1 )
# 624 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "parser.mly"
                                                       ( BConst true)
# 630 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
                                                       ( BConst false )
# 636 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'variable) in
    Obj.repr(
# 74 "parser.mly"
                                                       ( Var (_1) )
# 643 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "parser.mly"
                                                       ( Unit )
# 649 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 76 "parser.mly"
                                                       ( _2 )
# 656 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 77 "parser.mly"
                                                       ( ArithOp (Add,_1,_3) )
# 664 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 78 "parser.mly"
                                                       ( ArithOp (Mul,_1,_3) )
# 672 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 79 "parser.mly"
                                                       ( ArithOp (Min,_1,_3) )
# 680 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 80 "parser.mly"
                                                       ( ArithOp (Div,_1,_3) )
# 688 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 81 "parser.mly"
                                                       ( ArithOp (Mod,_1,_3) )
# 696 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 82 "parser.mly"
                                                       ( ArithOp (Min,Const 0, _2) )
# 703 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 83 "parser.mly"
                                                       ( CompOp (L,_1,_3) )
# 711 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 84 "parser.mly"
                                                       ( CompOp (Le,_1,_3) )
# 719 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 85 "parser.mly"
                                                       ( CompOp (G,_1,_3) )
# 727 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 86 "parser.mly"
                                                       ( CompOp (Ge,_1,_3) )
# 735 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 87 "parser.mly"
                                                       ( CompOp (Eq,_1,_3) )
# 743 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 88 "parser.mly"
                                                       ( CompOp (Ne,_1,_3) )
# 751 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 89 "parser.mly"
                                                       ( BoolOp (Or,_1,_3) )
# 759 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 90 "parser.mly"
                                                       ( BoolOp (And,_1,_3) )
# 767 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 91 "parser.mly"
                                                       ( BoolOp (Not,_2, BConst true) )
# 774 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 92 "parser.mly"
                                                       ( If (_2,_4,_6) )
# 783 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'corps_func) in
    Obj.repr(
# 93 "parser.mly"
                                                       ( Let (_2,false,_3) )
# 791 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'variable) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'corps_func) in
    Obj.repr(
# 94 "parser.mly"
                                                       ( Let (_3,true,_4) )
# 799 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 95 "parser.mly"
                                                       ( Let (_3,true,_5) )
# 807 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 96 "parser.mly"
                                                       ( Let (_2,false,_4) )
# 815 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 97 "parser.mly"
                                                       ( In (_1,_3) )
# 823 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 98 "parser.mly"
                                                       ( _1 )
# 830 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 99 "parser.mly"
                                                       ( Gseq (_1,_3) )
# 838 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 100 "parser.mly"
                                                       ( Seq (_1,_3) )
# 846 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 101 "parser.mly"
                                                       ( RefNew (_1,_3) )
# 854 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 102 "parser.mly"
                                                       ( Exn _2 )
# 861 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 103 "parser.mly"
                                                       ( Raise _2 )
# 868 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 104 "parser.mly"
                                                       ( TryWith (_2,_4,_6) )
# 877 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 105 "parser.mly"
                                                       ( ValRef (_2) )
# 884 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 106 "parser.mly"
                                                       ( Ref _2 )
# 891 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 107 "parser.mly"
                                                       ( Incr _2 )
# 898 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 108 "parser.mly"
                                                       ( PrInt (_2) )
# 905 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func) in
    Obj.repr(
# 109 "parser.mly"
                                                       ( _1 )
# 912 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'applic) in
    Obj.repr(
# 110 "parser.mly"
                                                       ( _1 )
# 919 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 113 "parser.mly"
                                                       ( Nom _1 )
# 926 "parser.ml"
               : 'variable))
; (fun __caml_parser_env ->
    Obj.repr(
# 114 "parser.mly"
                                                       ( None )
# 932 "parser.ml"
               : 'variable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 118 "parser.mly"
                                                       ( Const _1 )
# 939 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 119 "parser.mly"
                                                       ( BConst true)
# 945 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 120 "parser.mly"
                                                       ( BConst false )
# 951 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 121 "parser.mly"
                                                       ( ValRef (_2) )
# 958 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 122 "parser.mly"
                                                       ( Var (Nom _1) )
# 965 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 123 "parser.mly"
                                                       ( Unit )
# 971 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 124 "parser.mly"
                                                       ( _2 )
# 978 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'corps_func) in
    Obj.repr(
# 127 "parser.mly"
                                                       ( _2 )
# 986 "parser.ml"
               : 'func))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'corps_func) in
    Obj.repr(
# 128 "parser.mly"
                                                       ( _2 )
# 993 "parser.ml"
               : 'func))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'variable) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'corps_func) in
    Obj.repr(
# 132 "parser.mly"
                                                       ( Fun (_1,_2) )
# 1001 "parser.ml"
               : 'corps_func))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 133 "parser.mly"
                                                       ( Fun (_1,_3) )
# 1009 "parser.ml"
               : 'corps_func))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 134 "parser.mly"
                                                       ( Fun (_1,_3) )
# 1017 "parser.ml"
               : 'corps_func))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'applic) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 138 "parser.mly"
                                                       ( App (_1,_2) )
# 1025 "parser.ml"
               : 'applic))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'sexpr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 139 "parser.mly"
                                                       ( App (_1,_2) )
# 1033 "parser.ml"
               : 'applic))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Types.expr)
